<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-16T22:15:32+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stack O Flow</title><subtitle>조금씩 알아가는 것을 적는 개발 노트입니다.</subtitle><author><name>Sangjae Oh</name></author><entry><title type="html">📖 자바 ORM 표준 JPA 프로그래밍</title><link href="http://localhost:4000/etc/books/%EC%9E%90%EB%B0%94-ORM-%ED%91%9C%EC%A4%80-JPA-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="alternate" type="text/html" title="📖 자바 ORM 표준 JPA 프로그래밍" /><published>2023-01-16T00:00:00+09:00</published><updated>2023-01-16T00:00:00+09:00</updated><id>http://localhost:4000/etc/books/%EC%9E%90%EB%B0%94-ORM-%ED%91%9C%EC%A4%80-JPA-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</id><content type="html" xml:base="http://localhost:4000/etc/books/%EC%9E%90%EB%B0%94-ORM-%ED%91%9C%EC%A4%80-JPA-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"><![CDATA[<p><a href="https://product.kyobobook.co.kr/detail/S000000935744" target="_blank">자바 ORM 표준 JPA 프로그래밍</a> 책을 읽고 내용을 아주 간단하게 정리한 글입니다. 책에는 자세한 설명과 예제가 많으니 <strong>꼭 구입해서 읽는것을 추천</strong>합니다~👍</p>

<hr />

<h1 id="1-jpa-소개">1. JPA 소개</h1>
<h2 id="11-sql을-직접-다룰-때-발생하는-문제점">1.1 SQL을 직접 다룰 때 발생하는 문제점</h2>
<ul>
  <li>자바로 개발하는 애플리케이션은 대부분 관계형 데이터베이스를 데이터 저장소로 사용한다.</li>
  <li>JDBC API를 사용해 SQL을 전달한다.</li>
</ul>

<h3 id="111-반복-반복-그리고-반복">1.1.1 반복, 반복 그리고 반복</h3>
<p>객체를 데이터 베이스에 CURD 하려먼 너무많은 SQL과 JDBC API를 코드로 작성해야 한다. 테이블이 여러개라면 무수히 많은 SQL을 작성해야 한다.</p>

<h3 id="112-sql에-의존적인-개발">1.1.2 SQL에 의존적인 개발</h3>
<p>애플리케이션에서 SQL을 직접 다룰 때 발생하는 문제점</p>
<ul>
  <li>진정한 의미의 계층 분할이 어렵다.</li>
  <li>엔티티를 신뢰할 수 없다.</li>
  <li>SQL에 의존적인 개발을 피하기 어렵다.</li>
</ul>

<h3 id="113-jpa와-문제-해결">1.1.3 JPA와 문제 해결</h3>
<p>JPA를 사용하면 객체를 데이터베이스에 저장하고 관리할 때, 개발자가 직접 SQL을 작성하는 것이 아니라 JPA가 제공하는 API를 사용하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 저장</span>
<span class="n">jpa</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

<span class="c1">// 조회</span>
<span class="nc">String</span> <span class="n">memberId</span> <span class="o">=</span> <span class="s">"helloId"</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>

<span class="c1">// 수정</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"이름변경"</span><span class="o">);</span> <span class="c1">// jpa는 update 메소드가 따로 없다.</span>

<span class="c1">// 연관된 객체 조회</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>
<span class="nc">Team</span> <span class="n">team</span> <span class="o">=</span> <span class="n">member</span><span class="o">.</span><span class="na">getTeam</span><span class="o">();</span>
</code></pre></div></div>

<h2 id="12-패러다임-불일치">1.2 패러다임 불일치</h2>
<ul>
  <li>객체와 관계형 데이터베이스는 지향하는 목적이 서로 다르다.</li>
  <li>기능과 표현 방법도 다르다.</li>
  <li>객체 구조를 테이블 구조에 저장하는 데는 한계가 있다.</li>
</ul>

<h3 id="121-상속">1.2.1 상속</h3>
<p>객체는 상속이라는 기능을 가지고 있지만 테이블은 상속이라는 기능이 없다.(일부 데이터베이스는 상속 기능을 지원하지만 객체의 상속과는 약간 다르다.)</p>

<center><img src="/assets/images/posts/books/2/1_2_객체상속모델.png" alt="객체상속모델" width="90%" height="90%" /></center>

<p><br /></p>

<p>데이터 베이스 모델링에서는 슈퍼타입 서브타입 관계를 사용하면 유사하게 만들 수 있다.</p>

<center><img src="/assets/images/posts/books/2/1_2_테이블모델.png" alt="테이블모델" width="90%" height="90%" /></center>

<p><br /></p>

<p>위의 구조를 JDBC API를 사용해서 구현하려면 작성해야 할 코드량이 만만치 않다.</p>
<ul>
  <li>INSERT INTO ITEM…</li>
  <li>INSERT INTO ALBUM…</li>
</ul>

<p><br /></p>

<p><strong>JPA와 상속</strong><br />
JPA는 상속과 관련된 패러다임 불일치 문제를 개발자 대신 해결해 준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 저장</span>
<span class="n">jpa</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">album</span><span class="o">);</span>

<span class="c1">// JPA에서 실행 해주는 SQL</span>
<span class="no">INSERT</span> <span class="no">INTO</span> <span class="no">ITEM</span><span class="o">...</span>
<span class="no">INSERT</span> <span class="no">INTO</span> <span class="no">ALBUM</span><span class="o">...</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="122-연관관계">1.2.2 연관관계</h3>
<ul>
  <li><strong>객체는 참조를 사용해 다른 객체와 연관관계</strong>를 가진다. 참조에 접근해서 연관된 객체를 조회한다.</li>
  <li><strong>테이블은 외래 키를 사용해 다른 테이블과 연관관계</strong>를 가진다. 조인을 사용해서 연관된 테이블을 조회한다.</li>
  <li><strong>객체는 참조가 있는 방향으로만 조회할 수 있다.</strong></li>
</ul>
<center><img src="/assets/images/posts/books/2/1_2_연관관계.png" alt="연관관계" width="90%" height="90%" /></center>

<p><br /></p>

<p><strong>객체를 테이블에 맞추어 모델링</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 관계형 데이터베이스가 사용하는 방식에 맞추면 객체 참조를 통해 조회할 수 없다.</span>
<span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>   <span class="c1">// MEMBER_ID 컬럼 사용</span>
    <span class="nc">Long</span> <span class="n">teamId</span><span class="o">;</span> <span class="c1">// TEAM_ID FK 컬럼 사용</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>객체지향 모델링</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 패러다임 불일치를 해결하려고 소모하는 코드가 많다.</span>
<span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>   <span class="c1">// MEMBER_ID 컬럼 사용</span>
    <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span> <span class="c1">// 참조로 연관관계를 맺는다.</span>
<span class="o">}</span>

<span class="c1">// 데이터베이스에 저장</span>
<span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">getTeam</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span> <span class="c1">// TEAM_ID FK를 직접 구해야 함</span>
<span class="o">...</span><span class="na">생략</span><span class="o">...</span>

<span class="c1">// 조회</span>
<span class="no">SQL</span> <span class="n">실행</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span> <span class="o">();</span>
<span class="nc">Team</span> <span class="n">team</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">();</span>
<span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="n">member</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team</span><span class="o">);</span> <span class="c1">// 직접 회원과 팀 관계 설정</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>JPA와 연관관계</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JPA는 연관관계와 관련된 패러다임 불일치 문제를 해결해준다.</span>

<span class="c1">// 저장</span>
<span class="n">member</span><span class="o">.</span><span class="na">setTeam</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
<span class="n">jpa</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// TEAM_ID FK를 직접 지정할 필요 없음</span>

<span class="c1">// 조회</span>
<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>
<span class="nc">Team</span> <span class="n">team</span> <span class="o">=</span> <span class="n">member</span><span class="o">.</span><span class="na">getTeam</span><span class="o">();</span> <span class="c1">// 바로 사용 가능</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="123-객체-그래프-탐색">1.2.3 객체 그래프 탐색</h3>
<p>객체에서 회원에 소속된 팀을 조회할 때는 다음처럼 참조를 사용해서 연관된 팀을 찾으면 되는데, 이것을 객체 그래프 탐색이라 한다.</p>

<center><img src="/assets/images/posts/books/2/1_2_객체그래프탐색.png" alt="객체그래프탐색" width="90%" height="90%" /></center>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 객체 그래프 탐색</span>
<span class="n">member</span><span class="o">.</span><span class="na">getOrder</span><span class="o">().</span><span class="na">getOrderItem</span><span class="o">()...</span>

<span class="c1">// 문제 발생</span>
<span class="n">member</span><span class="o">.</span><span class="na">getOrder</span><span class="o">();</span> <span class="c1">// 만약 null이라면?</span>
</code></pre></div></div>

<p><strong>SQL을 직접 다루면 처음 실행하는 SQL에 따라 객체 그래프를 어디까지 탐색할 수 있는지 정해진다.</strong> 이는 객체 그래프가 언제 끊어질지 모르기 때문에 함부로 탐색할 수 없다.</p>

<p><strong>JPA와 객체 그래프 탐색</strong><br />
JPA는 연관된 객체를 사용하는 시점에 적절한 SELECT SQL을 실행한다(<strong>지연로딩</strong>). 따라서 JPA를 사용하면 연관된 객체를 신뢰하고 조회할 수 있다.</p>

<h3 id="124-비교">1.2.4 비교</h3>
<ul>
  <li>데이터베이스는 기본 키의 값으로 각 row를 구분</li>
  <li>객체는 동일성, 동등성 비교.
    <ul>
      <li>동일성은 == 비교. 객체 인스턴스의 주소 값을 비교한다.</li>
      <li>동등성은 equals() 비교. 객체 내부의 값을 비교한다.</li>
    </ul>
  </li>
</ul>

<p><strong>JDBC API 비교</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">memberId</span> <span class="o">=</span> <span class="s">"100"</span><span class="o">;</span>
<span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="n">memberDAO</span><span class="o">.</span><span class="na">getMember</span><span class="o">(</span><span class="n">memberID</span><span class="o">);</span>
<span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="n">memberDAO</span><span class="o">.</span><span class="na">getMember</span><span class="o">(</span><span class="n">memberID</span><span class="o">);</span>

<span class="c1">// false</span>
<span class="n">member1</span> <span class="o">==</span> <span class="n">member2</span><span class="o">;</span>
</code></pre></div></div>

<p><strong>JPA 비교</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">memberId</span> <span class="o">=</span> <span class="s">"100"</span><span class="o">;</span>
<span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">memberID</span><span class="o">);</span>
<span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="n">jpa</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">memberID</span><span class="o">);</span>

<span class="c1">// true</span>
<span class="n">member1</span> <span class="o">==</span> <span class="n">member2</span><span class="o">;</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="125-정리">1.2.5 정리</h3>
<p><strong>객체 모델과 관계형 데이터베이스 모델은 지향하는 패러다임이 서로 다르다.</strong> 이 패러다임 차이를 극복하려고 개발자가 너무 많은 시간과 코드를 소비한다. 결국, 객체 모델링은 힘을 잃고 점점 데이터 중심의 모델로 변해간다.</p>

<p><strong>JPA는 패러다임 불일치 문제를 해결하고, 정교한 객체 모델링을 유지하게 도와준다.</strong></p>

<p><br />
<br /></p>

<h2 id="13-jpa란-무엇인가">1.3 JPA란 무엇인가?</h2>
<p><strong>JPA(java persistence API)는 자바진영 ORM 기술 표준</strong>이다. 애플리케이션과 JDBC 사이에서 동작한다.</p>

<center><img src="/assets/images/posts/books/2/1_3_JPA.png" alt="JPA" width="90%" height="90%" /></center>

<p><br /></p>

<p><strong>ORM이란?</strong><br />
ORM(Object-Relational Mapping)은 <strong>객체와 관계형 데이터 베이스를 매핑한다는 뜻</strong>이다. 다양한 ORM 프레임워크들이 있는데 자바 진영에서는 <strong>하이버네이트 프레임워크가 가장 많이 사용</strong>된다.</p>

<center><img src="/assets/images/posts/books/2/1_3_JPA조회.png" alt="JPA조회" width="80%" height="80%" /></center>

<p><br />
<br /></p>

<h3 id="131-jpa-소개">1.3.1 JPA 소개</h3>
<center><img src="/assets/images/posts/books/2/1_3_JPA표준인터페이스와구현체.png" alt="JPA표준인터페이스와구현체" width="80%" height="80%" /></center>

<p><br /></p>

<p><strong>JPA는 자바 ORM 기술에 대한 API 표준 명세다.</strong> 쉽게 이야기해서 인터페이스를 모아둔 것이다. 따라서 JPA를 사용하려면 JPA를 구현한 ORM 프레임워크를 선택해야 한다. ORM 프레임워크 중 <strong>하이버네이트가 가장 대중적</strong>이다.</p>

<p><br /></p>

<h3 id="132-왜-jpa를-사용해야-하는가">1.3.2 왜 JPA를 사용해야 하는가?</h3>
<ul>
  <li>생산성</li>
  <li>유지보수</li>
  <li>패러다임 불일치 해결</li>
  <li>성능 (캐시)</li>
  <li>데이터 접근 추상화와 벤더 독립성
    <ul>
      <li>데이터베이스마다 사용법이 다르다 (예: 페이징 쿼리)</li>
      <li>JPA에게 데이터베이스만 알려주면 자동으로 해결된다</li>
    </ul>
  </li>
  <li>표준
    <ul>
      <li>자바 진영 ORM 기술 표준</li>
      <li>표준을 사용하면 다른 구현 기술로 손쉽게 변경 가능</li>
    </ul>
  </li>
</ul>

<center><img src="/assets/images/posts/books/2/1_3_벤더독립성.png" alt="벤더독립성" width="80%" height="80%" /></center>

<p><br />
<br /></p>

<h2 id="14-정리">1.4 정리</h2>
<ul>
  <li>SQL을 직접 다룰 때 발생하는 다양한 문제</li>
  <li>객체지향 언어와 관계형 데이터베이스 사이의 패러다임 불일치 문제</li>
  <li>JPA가 각 문제를 어떻게 해결하는지</li>
  <li>JPA가 무엇인지</li>
  <li>JPA 장점</li>
</ul>

<p><br />
<br />
<br />
<br /></p>

<p><strong>…작성중…</strong> 📝</p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="books" /><category term="books" /><category term="JPA" /><category term="ORM" /><summary type="html"><![CDATA[자바 ORM 표준 JPA 프로그래밍 책을 읽고 내용을 아주 간단하게 정리한 글입니다. 책에는 자세한 설명과 예제가 많으니 꼭 구입해서 읽는것을 추천합니다~👍]]></summary></entry><entry><title type="html">📖 도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</title><link href="http://localhost:4000/etc/books/%EB%8F%84%EB%A9%94%EC%9D%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="📖 도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지" /><published>2023-01-09T00:00:00+09:00</published><updated>2023-01-09T00:00:00+09:00</updated><id>http://localhost:4000/etc/books/%EB%8F%84%EB%A9%94%EC%9D%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/etc/books/%EB%8F%84%EB%A9%94%EC%9D%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"><![CDATA[<p><a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</a> 책을 읽고 내용을 아주 간단하게 정리한 글입니다. 책에는 자세한 설명과 예제가 많으니 <strong>꼭 구입해서 읽는것을 추천</strong>합니다~👍</p>

<hr />

<h1 id="1-도메인-모델-시작하기">1. 도메인 모델 시작하기</h1>
<h2 id="11-도메인이란">1.1 도메인이란?</h2>
<p>소프트웨어로 해결하고자 하는 문제 영역을 도메인이라 한다.</p>

<h2 id="12-도메인-전문가와-개발자-간-지식공유">1.2 도메인 전문가와 개발자 간 지식공유</h2>
<p>“Garbage in, Garbage out” 잘못된 값이 들어가면 잘못된 결과가 나온다.</p>

<p>전문가나 관련자가 요구한 내용이 항상 올바른 것은 아니다. 그래서 개발자는 요구사항을 이해할 때 왜 이런 기능일 요구하는지 또는 실제로 원하는게 무엇인지 생각하고 전문가와 대화를 통해 진짜로 원하는 것을 찾아야 한다.</p>

<h2 id="13-도메인-모델">1.3 도메인 모델</h2>
<p>도메인 모델은 특정 도메인을 개념적으로 표현한 것이다. 도메인 모델을 사용하면 여러 관계자들이 동일한 모습으로 도메인을 이해하고 도메인 지식을 공유하는데 도움이 된다. 도메인 모델을 이해하는 데 도움이 된다면 객체기반 표현이든, 함수 표현이든 표현 방식이 무엇인지는 중요하지 않다.</p>
<center><img src="/assets/images/posts/books/1/1_3_객체기반도메인모델.png" alt="객체기반도메인모델" width="70%" height="70%" /></center>
<center><img src="/assets/images/posts/books/1/1_3_상태다이어그램도메인모델.png" alt="상태다이어그램도메인모델" width="70%" height="70%" /></center>

<h2 id="14-도메인-모델-패턴">1.4 도메인 모델 패턴</h2>
<center><img src="/assets/images/posts/books/1/1_4_아키텍처구성.png" alt="아키텍처구성" width="50%" height="50%" /></center>

<table>
  <thead>
    <tr>
      <th>영역</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>사용자 인터페이스(UI) 또는 표현(Presentation)</td>
      <td>사용자의 요청을 처리하고 사용자에게 정보를 보여준다. 여기서 사용자는 소프트웨어를 사용하는 사람뿐만 아니라 외부 시스템일 수도 있다.</td>
    </tr>
    <tr>
      <td>응용(Application)</td>
      <td>사용자가 요청한 기능을 실행한다. 업무 로직을 직접 구현하지 않으며 도메인 계층을 조합해서 기능을 실행한다.</td>
    </tr>
    <tr>
      <td>도메인(Domain)</td>
      <td>시스템이 제공할 도메인 규칙을 구현한다.</td>
    </tr>
    <tr>
      <td>인프라스트럭처(Infrastructure)</td>
      <td>데이터베이스나 메시징 시스템과 같은 외부 시스템과의 연동을 처리한다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p><strong>개념 모델과 구현 모델</strong><br />
개념 모델은 순수하게 문제를 분석한 결과물이다. 개념 모델은 데이터베이스, 트랜잭션 처리, 성능, 구현 기술과 같은 것을 고려하고 있지 않기 때문에 실제 코드를 작성할 때 개념 모델을 있는 그대로 사용할 수 없다. 그래서 개념 모델을 구현 가능한 형태의 모델로 전환하는 과정을 거치게 된다.</p>

<p>처음부터 완벽한 개념 모델을 만들기보다는 전반적인 개요를 알 수 있는 수준으로 개념 모델을 작성해야한다. 프로젝트 초기에는 개요 수준의 개념 모델로 도메인에 대한 전체 윤곽을 이해하는 데 집중하고, 구현하는 과정에서 개념 모델을 구현 모델로 점진적으로 발전시켜 나가야 한다.</p>

<h2 id="15-도메인-모델-도출">1.5 도메인 모델 도출</h2>
<p>도메인을 모델링할 때 기본이 되는 작업은 모델을 구성하는 핵심 구성요소, 규칙, 기능을 찾는 것이다. 이 과정은 요구사항에서 출발한다. 요구사항을 통해 도메인 모델을 점진적으로 만들어 나간다. 이렇게 만든 모델은 요구사항 정련을 위해 도메인 전문가나 다른 개발자와 논의하는 과정에서 공유되기도 한다. 모델을 공유할 때는 화이트보드나 위키 같은 도구를 사용해서 누구나 쉽게 접근할 수 있도록 하면 좋다.</p>

<h2 id="16-엔티티와-벨류">1.6 엔티티와 벨류</h2>
<h3 id="161-엔티티">1.6.1 엔티티</h3>
<ul>
  <li>식별자를 가진다.</li>
  <li>식별자는 엔티티 객체마다 고유하다.</li>
</ul>

<h3 id="162-엔티티의-식별자-생성">1.6.2 엔티티의 식별자 생성</h3>
<ul>
  <li>특정 규칙에 따라 생성.</li>
  <li>UUID나 Nano ID와 같은 고유 식별자 생성기 사용.</li>
  <li>값을 직접 입력.</li>
  <li>일련번호 사용(시퀀스나 DB의 자동 증가 컬럼 사용).</li>
</ul>

<h3 id="163-밸류-타입">1.6.3 밸류 타입</h3>
<ul>
  <li>밸류 타입은 개념적으로 완전한 하나를 표현할 때 사용한다.</li>
  <li>의미를 명확하게 표현하기 위해 사용되기도 한다.</li>
  <li>밸류 타입을 위한 기능을 추가할 수 있다.</li>
  <li>불변으로 구현한다.</li>
</ul>

<h3 id="164-엔티티-식별자와-밸류-타입">1.6.4 엔티티 식별자와 밸류 타입</h3>
<ul>
  <li>식별자를 위한 밸류 타입을 사용해서 의미가 잘 드러나도록 할 수 있다.</li>
</ul>

<h3 id="165-도메인-모델에-set-넣지-않기">1.6.5 도메인 모델에 set 넣지 않기</h3>
<ul>
  <li>상태 변경을 위한 set 사용시 도메인 지식이 코드에서 사라진다.</li>
  <li>객체를 생성할 때 온전하지 않은 상태가 될 수 있다.</li>
</ul>

<p><strong>DTO도 최대한 불변 객체로 사용하도록 하자</strong></p>

<h2 id="17-도메인-용어와-유비쿼터스-언어">1.7 도메인 용어와 유비쿼터스 언어</h2>
<p><strong>도메인 용어</strong><br />
STEP1, STEP2 같은것이 아닌 PAYMENT_WAITING, PREPARING 같은 도메인 용어를 사용하여 코드를 작성한다.</p>

<p><strong>유비쿼터스 언어</strong><br />
전문가, 관계자 개발자가 도메인과 관련된 공통의 언어를 만들고 이를 대화, 문서, 도메인 모델, 코드 테스트 등 모든 곳에서 같은 용어를 사용한다. 이렇게 하면 소통 과정에서 발생하는 용어의 모호함을 줄일 수 있고 개발자는 도메인과 코드 사이에서 불필요한 해석 과정을 줄일 수 있다.</p>

<p><br />
<br />
<br /></p>

<h1 id="2-아키택처-개요">2. 아키택처 개요</h1>
<h2 id="21-네-개의-영역">2.1 네 개의 영역</h2>
<p><strong>표현 영역</strong><br />
사용자의 요청을 받아 응용 영역에 전달하고 응용 영역의 처리 결과를 다시 사용자에게 보여주는 역할</p>
<center><img src="/assets/images/posts/books/1/2_1_표현영역.png" alt="표현영역" width="80%" height="80%" /></center>

<p><br /></p>

<p><strong>응용 영역</strong><br />
표현 영역을 통해 요청을 전달받아 시스템이 사용자에게 제공해야 할 기능을 구현하는 역할. 로직을 직접 수행하기보다는 도메인 모델에 로직 수행을 위임한다.</p>
<center><img src="/assets/images/posts/books/1/2_1_응용영역.png" alt="응용영역" width="80%" height="80%" /></center>

<p><br /></p>

<p><strong>도메인 영역</strong><br />
도메인 모델을 구현. 도메인 모델은 도메인의 핵심 로직을 구현한다.</p>

<p><br /></p>

<p><strong>인프라스트럭처 영역</strong><br />
구현 기술에 대한 것을 다룬다. 이 영역은 논리적인 개념을 표현하기보다는 실제 구현을 다룬다.</p>
<center><img src="/assets/images/posts/books/1/2_1_인프라스트럭처영역.png" alt="인프라스트럭처영역" width="40%" height="40%" /></center>

<h2 id="22-계층-구조-아키텍처">2.2 계층 구조 아키텍처</h2>
<p><img src="/assets/images/posts/books/1/2_2_계층구조.png" alt="계층구조" width="30%" height="30%" />
<img src="/assets/images/posts/books/1/2_2_계층구조상의존관계.png" alt="계층구조상의존관계" width="50%" height="50%" /></p>
<ul>
  <li>상위 계층에서 하위 계층으로 의존만 존재하고 하위 계층에서 상위 계층에 의존하지 않는다.</li>
</ul>

<h2 id="23-dip">2.3 DIP</h2>
<center><img src="/assets/images/posts/books/1/2_3_고수준저수준.png" alt="고수준저수준" width="60%" height="60%" /></center>
<center><img src="/assets/images/posts/books/1/2_3_고수준저수준2.png" alt="고수준저수준2" width="60%" height="60%" /></center>
<center><img src="/assets/images/posts/books/1/2_3_고수준저수준3.png" alt="고수준저수준3" width="60%" height="60%" /></center>
<center><img src="/assets/images/posts/books/1/2_3_DIP.png" alt="DIP" width="70%" height="70%" /></center>

<h2 id="24-도메인-영역의-주요-구성요소">2.4 도메인 영역의 주요 구성요소</h2>

<table>
  <thead>
    <tr>
      <th><strong>요소</strong></th>
      <th><strong>설명</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>엔티티 ENTITY</td>
      <td>고유의 식별자를 갖는 객체로 자신의 라이프 사이클을 갖는다. 주문, 회원, 상품과 같이 도메인의 고유한 개념을 표현한다. 도메인 모델의 데이터를 포함하며 해당 데이터와 관련된 기능을 함께 제공한다.</td>
    </tr>
    <tr>
      <td>밸류 VALUE</td>
      <td>고유의 식별자를 갖지 않는 객체로 주로 개념적으로 하나인 값을 표현한다. 엔티티의 속성으로 사용할 뿐만 아니라 다른 밸류 타입의 속성으로도 사용할 수 있다.</td>
    </tr>
    <tr>
      <td>애그리거트 AGGREGATE</td>
      <td>연관된 엔티티와 밸류 객체를 개념적으로 하나로 묶은 것이다. 예를 들어 주문과 관련된 Order 엔티티, OrderLine 밸류, Orderer 밸류 객체를 ‘주문’ 애그리거트로 묶을 수 있다.</td>
    </tr>
    <tr>
      <td>리포지터리 REPOSITORY</td>
      <td>도메인 모델의 영속성을 처리한다. 예를 들어 DBMS 테이블에서 엔티티 객체를 로딩하거나 저장하는 기능을 제공한다.</td>
    </tr>
    <tr>
      <td>도메인 서비스 DOMAIN SERVICE</td>
      <td>특정 엔티티에 속하지 않은 도메인 로직을 제공한다. 도메인 로직이 여러 엔티티와 밸류를 필요로 하면 도메인 서비스에서 로직을 구현한다.</td>
    </tr>
  </tbody>
</table>

<h2 id="25-요청-처리-흐름">2.5 요청 처리 흐름</h2>
<center><img src="/assets/images/posts/books/1/2_5_요청처리흐름.png" alt="요청처리흐름" width="80%" height="80%" /></center>

<h2 id="26-인프라스트럭처-개요">2.6 인프라스트럭처 개요</h2>
<ul>
  <li>도메인 객체의 영속성 처리, 트랜젝션, REST 클라이언트 등 다른영역에서 필요로 하는 프레임워크, 구현 기술, 보조 기능을 지원한다.</li>
  <li>보통 의존성역전 사용</li>
  <li>@Transactional 같은 DIP를 사용하지 않는 예외도 편의를 위해 허용</li>
</ul>

<h2 id="27-모듈-구성">2.7 모듈 구성</h2>
<center><img src="/assets/images/posts/books/1/2_7_모듈구성1.png" alt="모듈구성1" width="60%" height="60%" /></center>
<center><img src="/assets/images/posts/books/1/2_7_모듈구성2.png" alt="모듈구성2" width="60%" height="60%" /></center>
<center><img src="/assets/images/posts/books/1/2_7_모듈구성3.png" alt="모듈구성3" width="60%" height="60%" /></center>

<p><br />
<br />
<br /></p>

<h1 id="3-애그리거트">3. 애그리거트</h1>
<h2 id="31-애그리거트">3.1 애그리거트</h2>
<p>복잡한 도메인을 이해하고 관리하기 쉬운 단위로 만드려면 상위 수준에서 모델을 조망할 수 있는 방법이 필요한데, 그 방법이 바로 애그리거트다. 애그리거트는 관련된 객체를 하나의 군으로 묶어 준다.</p>
<center><img src="/assets/images/posts/books/1/3_1_애거리거트모델.png" alt="애거리거트모델" width="60%" height="60%" /></center>

<p>애그리거트는 경계를 갖는다. 한 애그리거트에 속한 객체는 다른 애그리거트에 속하지 않는다. 애그리거트는 독립된 객체 군이며 각 애그리거트는 자기 자신을 관리할 뿐 다른 애그리거트를 관리하지 않는다. 경계를 설정할 때 기본이 되는 것은 도메인 규칙과 요구사항이다. 도메인 규칙에 따라 함께 생성되는 구성요소는 한 애그리거트에 속할 가능성이 높다.</p>

<h2 id="32-애그리거트-루트">3.2 애그리거트 루트</h2>
<p>애그리거트에 속한 모든 객체가 일관된 상태를 유지하려면 애그리거트 전체를 관리할 주체가 필요한데, 이 책임을 지는 것이 바로 애그리거트 루트 엔티티이다. 애그리거트에 속한 객체는 애그리거트 루트 엔티티에 직접 또는 간접적으로 속하게 된다.</p>
<center><img src="/assets/images/posts/books/1/3_2_애그리거트루트.png" alt="애그리거트루트" width="50%" height="50%" /></center>

<h3 id="321-도메인-규칙과-일관성">3.2.1 도메인 규칙과 일관성</h3>
<ul>
  <li>애그리거트 루트의 핵심 역할은 애그리거트의 일관성이 깨지지 않도록 하는 것이다. 이를 위해 애그리거트 루트는 애그리거트가 제공해야 할 도메인 기능을 구현한다.</li>
  <li>애그리거트 외부에서 애그리거트에 속한 객체를 직접 변경하면 안된다. 이것은 모델의 일관성을 깨는 원인이 된다.</li>
  <li>단순히 필드를 변경하는 set 메서드를 공개(public) 범위로 만들지 않는다.</li>
  <li>밸류 타입은 불변으로 구현한다.</li>
</ul>

<h3 id="322-애그리거트-루트의-기능-구현">3.2.2 애그리거트 루트의 기능 구현</h3>
<ul>
  <li>애그리거트 루트는 애그리거트 내부의 다른 객체를 조합해 기능을 완성한다.</li>
  <li>애그리거트 루트가 구성요소의 상태만 참조하는 것은 아니다. 기능 실행을 위임하기도 한다.</li>
</ul>

<h3 id="323-트랜젝션-범위">3.2.3 트랜젝션 범위</h3>
<ul>
  <li>작을수록 좋다</li>
  <li>한 트랜젝션에서는 한 개의 애그리거트만 수정한다.</li>
  <li>부득이하게 한 트랜젝션으로 두 개 이상의 애그리거트를 수정해야 한다면 애그리거트에서 다른 애그리거트를 수정하지 말고, 응용 서비스에서 애그리거트를 수정하도록 구현한다.</li>
  <li>두 개 이상의 애그리거트를 수정해야 한다면, 도메인 이벤트를 사용한다.</li>
</ul>

<h2 id="33-리포지터리와-애그리거트">3.3 리포지터리와 애그리거트</h2>
<ul>
  <li>애그리거트: 개념상 완전한 하나의 도메인 모델</li>
  <li>리포지터리: 애그리거트 영속성을 처리
    <ul>
      <li>save: 애그리거트 저장</li>
      <li>findById: ID로 애그리거트를 구함</li>
    </ul>
  </li>
</ul>

<h2 id="34-id를-이용한-애그리거트-참조">3.4 ID를 이용한 애그리거트 참조</h2>
<ul>
  <li>애그리거트도 다른 애그리거트를 참조한다.</li>
  <li>애그리거트 참조는 애그리거트 루트가 다른 애그리거트 루트를 참조한다는 뜻이다.</li>
</ul>

<p><br /></p>

<p><strong>필드 참조</strong></p>
<center><img src="/assets/images/posts/books/1/3_4_필드참조.png" alt="필드참조" width="70%" height="70%" /></center>

<p>문제점</p>
<ul>
  <li>편한 탐색 오용</li>
  <li>결합도 증가</li>
  <li>성능에 대한 고민</li>
  <li>확장 어려움</li>
</ul>

<p><br /></p>

<p><strong>ID를 이용한 참조</strong></p>
<center><img src="/assets/images/posts/books/1/3_4_ID참조.png" alt="ID참조" width="70%" height="70%" /></center>

<p>장점</p>
<ul>
  <li>모델의 복잡도를 낮춘다</li>
  <li>응집도 증가</li>
  <li>구현 난이도 감소</li>
  <li>확장 용이</li>
</ul>

<h3 id="341-id를-이용한-참조와-조회-성능">3.4.1 ID를 이용한 참조와 조회 성능</h3>
<p><strong>N + 1 문제 발생</strong></p>

<p>해결방법</p>
<ul>
  <li>조회 전용 쿼리를 만들어 사용한다.</li>
  <li>쿼리가 복잡하거나 특화된 기능을 사용해야 한다면 마이바티스와 같은 기술로 구현하는걸 고려한다.</li>
</ul>

<h2 id="35-애그리거트-간-집합-연관">3.5 애그리거트 간 집합 연관</h2>
<p>1-N, M-N 연관에 대해 살펴본다.</p>

<p><strong>1-N</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Category</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span><span class="o">;</span> <span class="c1">//다른 애그리거트에 대한 1-N 연관</span>
<span class="o">}</span>
</code></pre></div></div>
<p>조회시 개념적으로 애거리거트 간에 1-N 연관이 있더라도 성능 문제 때문에 실제 구현에 반영하지 않는다. N-1로 연관지어 구현한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">CategoryId</span> <span class="n">categoryId</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductListService</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="nf">getProductOfCategory</span><span class="o">(</span><span class="nc">Long</span> <span class="n">categoryId</span><span class="o">,</span> <span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Category</span> <span class="n">category</span> <span class="o">=</span> <span class="n">categoryRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">categoryId</span><span class="o">);</span>
        <span class="n">checkCategory</span><span class="o">(</span><span class="n">category</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findByCategoryId</span><span class="o">(</span><span class="n">category</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">totalCount</span> <span class="o">=</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">countByCategoryId</span><span class="o">(</span><span class="n">category</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Page</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">totalCount</span><span class="o">,</span> <span class="n">products</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>M-N</strong><br />
M-N 연관은 개념적으로 양쪽 애그리거트에 컬렉션으로 연관을 만든다. 하지만 구현은 요구사항을 고려해서 결정한다. 개념적으로는 상품과 카테고리의 양방향 M-N 연관이 존재하지만 실제 구현에서는 상품에서 카테고리로의 단방향 M-N 연관만 적용하면 되는 것이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">CategoryId</span><span class="o">&gt;</span> <span class="n">categoryIds</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>RDBMS에서 M-N 연관 구현</strong></p>
<center><img src="/assets/images/posts/books/1/3_5_RDBMS_M-N연관.png" alt="RDBMS_M-N연관" width="70%" height="70%" /></center>

<p><br /></p>

<p><strong>JPA를 이용하여 ID 참조를 이용한 M-N 단방향 연관 구현</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
    <span class="nd">@EmbeddedId</span>
    <span class="kd">private</span> <span class="nc">ProductId</span> <span class="n">id</span><span class="o">;</span>
    
    <span class="nd">@ElementCollection</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product_category"</span><span class="o">,</span>
        <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product_id"</span><span class="o">))</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">CategoryId</span><span class="o">&gt;</span> <span class="n">categoryIds</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="36-애그리거트를-팩토리로-사용하기">3.6 애그리거트를 팩토리로 사용하기</h2>
<ul>
  <li>애그리거트가 갖고 있는 데이터를 이용해서 다른 애그리거트를 생성해야 한다면 애그리거트에 팩토리 메서드를 구현하는 것을 고려한다.</li>
  <li>별도의 도메인 서비스나, 팩토리 클래스를 만들 수도 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Store</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">Product</span> <span class="nf">createProduct</span> <span class="o">(</span><span class="nc">ProductId</span> <span class="n">newProductId</span><span class="o">,</span> <span class="o">...</span><span class="na">생략</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isBlocked</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">StoreBlockedException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Product</span><span class="o">(</span><span class="n">newProductId</span><span class="o">,</span> <span class="n">getId</span><span class="o">(),</span> <span class="o">...</span><span class="na">생략</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br />
<br /></p>

<h1 id="4-리포지터리와-모델-구현">4. 리포지터리와 모델 구현</h1>
<p>여기서는 책의 자세한 설명을 하지 않습니다. 아래의 문서와 책을 읽는 것을 추천합니다. 👍</p>
<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</a></li>
  <li><a href="http://www.yes24.com/Product/Goods/19040233" target="_blank">자바 ORM 표준 JPA 프로그래밍</a></li>
  <li><a href="https://spring.io/projects/spring-data-jpa" target="_blank">Spring Data JPA</a></li>
</ul>

<h2 id="41-jpa를-이용한-리포지터리-구현">4.1 JPA를 이용한 리포지터리 구현</h2>
<h3 id="411-모듈-위치">4.1.1 모듈 위치</h3>
<center><img src="/assets/images/posts/books/1/4_1_모듈위치.png" alt="모듈위치" width="70%" height="70%" /></center>

<h3 id="412-리포지터리-기본-기능-구현">4.1.2 리포지터리 기본 기능 구현</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderRepository</span> <span class="o">{</span>
    <span class="nc">Order</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">OrderNo</span> <span class="n">no</span><span class="o">);</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JpaOrderRepository</span> <span class="kd">implements</span> <span class="nc">OrderRepository</span> <span class="o">{</span>
    <span class="nd">@PersistenceContext</span>
    <span class="kd">private</span> <span class="nc">EntityManager</span> <span class="n">entityManager</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Order</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">OrderNo</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="42-스프링-데이터-jpa를-이용한-리포지터리-구현">4.2 스프링 데이터 JPA를 이용한 리포지터리 구현</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="nd">@Access</span><span class="o">(</span><span class="nc">AccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@EmbeddedId</span>
    <span class="kd">private</span> <span class="nc">OrderNo</span> <span class="n">number</span><span class="o">;</span>

    <span class="nd">@Version</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Orderer</span> <span class="n">orderer</span><span class="o">;</span>

    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderRepository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">,</span> <span class="nc">OrderNo</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">OrderNo</span> <span class="n">id</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">);</span>

    <span class="k">default</span> <span class="nc">OrderNo</span> <span class="nf">nextOrderNo</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">randomNo</span> <span class="o">=</span> <span class="nc">ThreadLocalRandom</span><span class="o">.</span><span class="na">current</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">900000</span><span class="o">)</span> <span class="o">+</span> <span class="mi">100000</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">number</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%tY%&lt;tm%&lt;td%&lt;tH-%d"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">(),</span> <span class="n">randomNo</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OrderNo</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CancelOrderService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">CancelPolicy</span> <span class="n">cancelPolicy</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CancelOrderService</span><span class="o">(</span><span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">,</span> <span class="nc">CancelPolicy</span> <span class="n">cancelPolicy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderRepository</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cancelPolicy</span> <span class="o">=</span> <span class="n">cancelPolicy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">(</span><span class="nc">OrderNo</span> <span class="n">orderNo</span><span class="o">,</span> <span class="nc">Canceller</span> <span class="n">canceller</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderNo</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">NoOrderException</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">cancelPolicy</span><span class="o">.</span><span class="na">hasCancellationPermission</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">canceller</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoCancellablePermission</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">order</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="43-매핑-구현">4.3 매핑 구현</h2>
<h3 id="431-엔티티와-밸류-기본-매핑-구현">4.3.1 엔티티와 밸류 기본 매핑 구현</h3>
<p>애그리거트와 JPA 매핑을 위한 기본 규칙</p>
<ul>
  <li>애그리거트 루트는 엔티티이므로 <code class="language-plaintext highlighter-rouge">@Entity</code>로 매핑 설정한다.</li>
</ul>

<p>한 테이블에 엔티티와 밸류 데이터가 같이 있다면</p>
<ul>
  <li>밸류는 <code class="language-plaintext highlighter-rouge">@Embeddable</code>로 매핑 설정한다.</li>
  <li>밸류 타입 프로퍼티는 <code class="language-plaintext highlighter-rouge">@Embedded</code>로 매핑 설정한다.</li>
  <li>매핑할 컬럼명 변경은 <code class="language-plaintext highlighter-rouge">@AttributeOverrides</code> 를 이용한다</li>
</ul>

<center><img src="/assets/images/posts/books/1/4_3_매핑구현.png" alt="매핑구현" width="70%" height="70%" /></center>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShippingInfo</span> <span class="o">{</span>
    <span class="nd">@Embedded</span>
    <span class="nd">@AttributeOverrides</span><span class="o">({</span>
            <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"zipCode"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"shipping_zip_code"</span><span class="o">)),</span>
            <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"address1"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"shipping_addr1"</span><span class="o">)),</span>
            <span class="nd">@AttributeOverride</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"address2"</span><span class="o">,</span> <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"shipping_addr2"</span><span class="o">))</span>
    <span class="o">})</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"shipping_message"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Receiver</span> <span class="n">receiver</span><span class="o">;</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="nd">@Access</span><span class="o">(</span><span class="nc">AccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Orderer</span> <span class="n">orderer</span><span class="o">;</span>

    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">ShippingInfo</span> <span class="n">shippingInfo</span><span class="o">;</span>
    <span class="o">...</span>
</code></pre></div></div>

<h3 id="432-기본-생성자">4.3.2 기본 생성자</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="nf">Receiver</span><span class="o">(){}</span>
</code></pre></div></div>

<h3 id="432-필드-접근-방식-사용">4.3.2 필드 접근 방식 사용</h3>
<p><code class="language-plaintext highlighter-rouge">@Access</code>를 이용해서 명시적으로 접근 방식을 지정하지 않으면 <code class="language-plaintext highlighter-rouge">@Id</code>나 <code class="language-plaintext highlighter-rouge">@EmbeddedId</code>의 위치에 따라 접근 방식을 결정한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="nd">@Access</span><span class="o">(</span><span class="nc">AccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="434-attributeconverter를-이용한-밸류-매핑-처리">4.3.4 AttributeConverter를 이용한 밸류 매핑 처리</h3>
<p>두 개 이상의 프로퍼티를 가진 밸류 타입을 한 개 컬럼에 매핑하려면 <code class="language-plaintext highlighter-rouge">@Embeddable</code> 애너테이션으로는 처리할 수 없다. 이럴 때 사용할 수 있는 것이 <code class="language-plaintext highlighter-rouge">AttributeConverter</code>이다.</p>

<center><img src="/assets/images/posts/books/1/4_3_두개프러퍼컬럼매핑.png" alt="두개프러퍼컬럼매핑" width="70%" height="70%" /></center>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Converter</span><span class="o">(</span><span class="n">autoApply</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MoneyConverter</span> <span class="kd">implements</span> <span class="nc">AttributeConverter</span><span class="o">&lt;</span><span class="nc">Money</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="o">{</span> 
    <span class="c1">// Money는 밸류 타입, Integer는 DB 타입</span>

    <span class="c1">// 밸류 타입을 DB 칼럼 값으로 변환</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">convertToDatabaseColumn</span><span class="o">(</span><span class="nc">Money</span> <span class="n">money</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">money</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">money</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// DB 칼럼 값을 밸류로 변환</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Money</span> <span class="nf">convertToEntityAttribute</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">Money</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @Converter(autoApply = true) 작성한 타입에 대해 자동 적용</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"total_amounts"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Money</span> <span class="n">totalAmounts</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @Converter(autoApply = false) 기본값, 직접 지정해야함</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>

    <span class="nd">@Convert</span><span class="o">(</span><span class="n">converter</span> <span class="o">=</span> <span class="nc">MoneyConverter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"total_amounts"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Money</span> <span class="n">totalAmounts</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="435-밸류-컬렉션-별도-테이블-매핑">4.3.5 밸류 컬렉션: 별도 테이블 매핑</h3>
<p>밸류 컬렉션을 별도 테이블로 매핑할때는 <code class="language-plaintext highlighter-rouge">@ElementCollection</code>과 <code class="language-plaintext highlighter-rouge">@CollectionTable</code>을 함께 사용한다.</p>

<center><img src="/assets/images/posts/books/1/4_3_밸류컬렉션테이블매핑.png" alt="밸류컬렉션테이블매핑" width="70%" height="70%" /></center>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@EmbeddedId</span>
    <span class="kd">private</span> <span class="nc">OrderNo</span> <span class="n">number</span><span class="o">;</span>

    <span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_line"</span><span class="o">,</span> <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_number"</span><span class="o">))</span>
    <span class="nd">@OrderColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"line_idx"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderLine</span><span class="o">&gt;</span> <span class="n">orderLines</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderLine</span> <span class="o">{</span>
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">ProductId</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"price"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Money</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"quantity"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"amounts"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Money</span> <span class="n">amounts</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="436-밸류-컬렉션-한-개-컬럼-매핑">4.3.6 밸류 컬렉션: 한 개 컬럼 매핑</h3>
<p>한 개 컬럼에 콤마로 구분해서 저장할 때 사용. <code class="language-plaintext highlighter-rouge">AttributeConverter</code>를 이용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailSet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Email</span><span class="o">&gt;</span> <span class="n">emails</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">EmailSet</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Email</span><span class="o">&gt;</span> <span class="n">emails</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">emails</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">emails</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Email</span><span class="o">&gt;</span> <span class="nf">getEmails</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="n">emails</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailSetConverter</span> <span class="kd">implements</span> <span class="nc">AttributeConverter</span><span class="o">&lt;</span><span class="nc">EmailSet</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">convertToDatabaseColumn</span><span class="o">(</span><span class="nc">EmailSet</span> <span class="n">attribute</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">attribute</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">attribute</span><span class="o">.</span><span class="na">getEmails</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">email</span> <span class="o">-&gt;</span> <span class="n">email</span><span class="o">.</span><span class="na">getAddress</span><span class="o">())</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">","</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">EmailSet</span> <span class="nf">convertToEntityAttribute</span><span class="o">(</span><span class="nc">String</span> <span class="n">dbData</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dbData</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">emails</span> <span class="o">=</span> <span class="n">dbData</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Email</span><span class="o">&gt;</span> <span class="n">emailSet</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">emails</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Email</span><span class="o">(</span><span class="n">value</span><span class="o">))</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toSet</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">EmailSet</span><span class="o">(</span><span class="n">emailSet</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="437-밸류를-이용한-id-매핑">4.3.7 밸류를 이용한 ID 매핑</h3>
<p>JPA에서 식별자 타입은 <code class="language-plaintext highlighter-rouge">Serializable</code> 타입이어야 하므로 <code class="language-plaintext highlighter-rouge">Serializable</code> 인터페이스를 상속받아야 한다. 밸류 타입으로 식별자를 구현할 때 얻을 수 있는 장점은 식별자에 기능을 추가할 수 있다는 점이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="nd">@EmbeddedId</span>
    <span class="kd">private</span> <span class="nc">OrderNo</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderNo</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"order_number"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="438-별도-테이블에-저장하는-밸류-매핑">4.3.8 별도 테이블에 저장하는 밸류 매핑</h3>
<p>루트 엔티티 외에 또 다른 엔티티가 있다면 진짜 엔티티인지 의심해 봐야한다. 단지 별도 테이블에 데이터를 저장 한다고 해서 엔티티인 것은 아니다.</p>

<p>예를 들어 게시글 데이터를 <code class="language-plaintext highlighter-rouge">ARTICLE</code> 테이블과 <code class="language-plaintext highlighter-rouge">ARTICLE_CONTENT</code> 테이블로 나눠서 저장한다고 하자.</p>

<p><strong>엔티티로 매핑 예 (잘못 됨)</strong></p>
<center><img src="/assets/images/posts/books/1/4_3_밸류매핑잘못.png" alt="밸류매핑잘못" width="70%" height="70%" /></center>

<p><br /></p>

<p><strong>별도 테이블로 매핑</strong></p>
<center><img src="/assets/images/posts/books/1/4_3_밸류매핑별도테이블.png" alt="밸류매핑별도테이블" width="70%" height="70%" /></center>

<p>밸류 매핑을 별도 테이블로 저장 하려면 <code class="language-plaintext highlighter-rouge">@SecondaryTable</code>과 <code class="language-plaintext highlighter-rouge">@AttributeOverride</code>을 사용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"article"</span><span class="o">)</span>
<span class="nd">@SecondaryTable</span><span class="o">(</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"article_content"</span><span class="o">,</span>
        <span class="n">pkJoinColumns</span> <span class="o">=</span> <span class="nd">@PrimaryKeyJoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Article</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@AttributeOverrides</span><span class="o">({</span>
            <span class="nd">@AttributeOverride</span><span class="o">(</span>
                    <span class="n">name</span> <span class="o">=</span> <span class="s">"content"</span><span class="o">,</span>
                    <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"article_content"</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"content"</span><span class="o">)),</span>
            <span class="nd">@AttributeOverride</span><span class="o">(</span>
                    <span class="n">name</span> <span class="o">=</span> <span class="s">"contentType"</span><span class="o">,</span>
                    <span class="n">column</span> <span class="o">=</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"article_content"</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"content_type"</span><span class="o">))</span>
    <span class="o">})</span>
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">ArticleContent</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="439-밸류-컬렉션을-entity로-매핑하기">4.3.9 밸류 컬렉션을 @Entity로 매핑하기</h3>
<p><code class="language-plaintext highlighter-rouge">@OneToMany</code> 사용</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="o">{</span><span class="nc">CascadeType</span><span class="o">.</span><span class="na">PERSIST</span><span class="o">,</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">REMOVE</span><span class="o">},</span>
            <span class="n">orphanRemoval</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product_id"</span><span class="o">)</span>
    <span class="nd">@OrderColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"list_idx"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Image</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
</code></pre></div></div>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">@Inheritance</code>를 이용한 상속 가능</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">InheritanceType</span><span class="o">.</span><span class="na">SINGLE_TABLE</span><span class="o">)</span>
<span class="nd">@DiscriminatorColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"image_type"</span><span class="o">)</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"image"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Image</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"II"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InternalImage</span> <span class="kd">extends</span> <span class="nc">Image</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
<span class="nd">@Entity</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"EI"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExternalImage</span> <span class="kd">extends</span> <span class="nc">Image</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
</code></pre></div></div>

<h3 id="4310-id-참조와-조인-테이블을-이용한-단방향-m-n-매핑">4.3.10 ID 참조와 조인 테이블을 이용한 단방향 M-N 매핑</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@CollectionTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product_category"</span><span class="o">,</span>
            <span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"product_id"</span><span class="o">))</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">CategoryId</span><span class="o">&gt;</span> <span class="n">categoryIds</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="44-애그리거트-로딩-전략">4.4 애그리거트 로딩 전략</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @Embeddable 컬렉션에 대한 즉시 로딩 설정</span>
<span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">EAGER</span><span class="o">)</span>

<span class="c1">// @Entity 컬렉션에 대한 지연 로딩 설정</span>
<span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
</code></pre></div></div>
<ul>
  <li>즉시 로딩: 에그리거트 루트를 구할 때 연관된 구성 요소를 DB에서 함께 읽어온다.</li>
  <li>지연 로딩: 실제 컬렉션에 접근할 때 DB에서 조회한다.</li>
</ul>

<h2 id="45-애그리거트-영속성-전파">4.5 애그리거트 영속성 전파</h2>
<p>애그리거트가 완전한 상태여야 한다는 것은 애그리거트 루트를 조회할 때뿐만 아니라 저장하고 삭제할 때도 하나로 처리해야 함을 의미한다.</p>
<ul>
  <li>저장 메서드는 애그리거트 루트만 저장하면 안되고 애그리거트에 속한 모든 객체를 저장해야 한다.</li>
  <li>삭제 메서드는 애그리거트 루트뿌만 아니라 애그리거트에 속한 모든 객체를 삭제해야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Embeddable</code> 매핑 타입은 함께 저장되고 삭제 되므로 추가 설정이 필요없다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Entity</code> 타입에 대한 매핑은 <code class="language-plaintext highlighter-rouge">cascade</code> 속성을 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@OneToMany</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="o">{</span><span class="nc">CascadeType</span><span class="o">.</span><span class="na">PERSIST</span><span class="o">,</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">REMOVE</span><span class="o">})</span>
</code></pre></div></div>

<h2 id="46-식별자-생성-기능">4.6 식별자 생성 기능</h2>
<p>식별자는 크게 세 가지 방식 중 하나로 생성한다.</p>
<ul>
  <li>사용자가 직접 생성</li>
  <li>도메인 로직으로 생성</li>
  <li>DB를 이용한 일련번호 사용</li>
</ul>

<h2 id="47-도메인-구현과-dip">4.7 도메인 구현과 DIP</h2>
<p>JPA의 @Entity나 @Table, extends Repository 인터페이스는 DIP 원칙을 어기고 있지만 개발 편의성과 실용성을 가지고, 복잡도를 높이지 않으면서 기술에 따른 구현 제약이 낮다면 합리적으로 선택하여 사용할 수 있다.</p>

<p><br />
<br />
<br /></p>

<h1 id="5-스프링-데이터-jpa를-이용한-조회-기능">5. 스프링 데이터 JPA를 이용한 조회 기능</h1>

<h2 id="51-시작에-앞서">5.1 시작에 앞서</h2>
<h2 id="52-검색을-위한-스펙">5.2 검색을 위한 스펙</h2>
<p>조회를 위해 다양한 검색 조건을 조합해야 할 때가 있다. 이 때 사용할 수 있는 것이 스펙(<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#specifications" target="_blank">Specification</a>)이다.</p>

<h2 id="53-스프링-데이터-jpa를-이용한-스펙-구현">5.3 스프링 데이터 JPA를 이용한 스펙 구현</h2>

<p><strong>스프링 데이터 JPA가 제공하는 Specification 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="nc">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="nc">Root</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="nc">CriteriaQuery</span><span class="o">&lt;?&gt;</span> <span class="n">query</span><span class="o">,</span> <span class="nc">CriteriaBuilder</span> <span class="n">builder</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>레포지토리 인터페이스 상속</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CustomerRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;,</span> <span class="nc">JpaSpecificationExecutor</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">,</span> <span class="nc">Sort</span> <span class="n">sort</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>스펙 생성 기능을 별도 클래스로 구현</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerSpecs</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="nf">isLongTermCustomer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">query</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="nc">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">minusYears</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">lessThan</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Customer_</span><span class="o">.</span><span class="na">createdAt</span><span class="o">),</span> <span class="n">date</span><span class="o">);</span>
    <span class="o">};</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="nf">hasSalesOfMoreThan</span><span class="o">(</span><span class="nc">MonetaryAmount</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">query</span><span class="o">,</span> <span class="n">builder</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="c1">// build query here</span>
    <span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="54-리포지터리dao에서-스펙-사용하기">5.4 리포지터리/DAO에서 스펙 사용하기</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">customers</span> <span class="o">=</span> <span class="n">customerRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">isLongTermCustomer</span><span class="o">());</span>
</code></pre></div></div>

<h2 id="55-스펙-조합">5.5 스펙 조합</h2>
<p>스펙 인터페이스는 <code class="language-plaintext highlighter-rouge">and</code>와 <code class="language-plaintext highlighter-rouge">or</code> 등 조합 메서드를 제공한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MonetaryAmount</span> <span class="n">amount</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MonetaryAmount</span><span class="o">(</span><span class="mf">200.0</span><span class="o">,</span> <span class="nc">Currencies</span><span class="o">.</span><span class="na">DOLLAR</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">customers</span> <span class="o">=</span> <span class="n">customerRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span>
  <span class="n">isLongTermCustomer</span><span class="o">().</span><span class="na">or</span><span class="o">(</span><span class="n">hasSalesOfMoreThan</span><span class="o">(</span><span class="n">amount</span><span class="o">)));</span>
</code></pre></div></div>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">null</code> 가능성이 있는 스펙 객체의 조합은 <code class="language-plaintext highlighter-rouge">where</code>를 사용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">Customer</span><span class="o">&gt;</span> <span class="n">spec</span> <span class="o">=</span> <span class="nc">Specification</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">createNullableSpec</span><span class="o">()).</span><span class="na">and</span><span class="o">(</span><span class="n">createOtherSpec</span><span class="o">());</span>
</code></pre></div></div>

<h2 id="56-정렬-지정하기">5.6 정렬 지정하기</h2>
<p>스프링 데이터 JPA는 두 가지 방법을 사용해서 정렬을 지정할 수 있다.</p>
<ul>
  <li>메서드 이름에 OrderBy를 사용해서 정렬 기준 지정</li>
  <li>Sort를 인자로 전달</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderSummaryDao</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">OrderSummary</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// OrderBy</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderSummary</span><span class="o">&gt;</span> <span class="nf">findByOrdererIdOrderByNumberDesc</span><span class="o">(</span><span class="nc">String</span> <span class="n">ordererId</span><span class="o">);</span>

    <span class="c1">// Sort</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderSummary</span><span class="o">&gt;</span> <span class="nf">findByOrdererId</span><span class="o">(</span><span class="nc">String</span> <span class="n">ordererId</span><span class="o">,</span> <span class="nc">Sort</span> <span class="n">sort</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"number"</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderSummary</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">orderSummaryDao</span><span class="o">.</span><span class="na">findByOrdererId</span><span class="o">(</span><span class="s">"id"</span><span class="o">,</span> <span class="n">sort</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="57-페이징-처리하기">5.7 페이징 처리하기</h2>
<p>스프링 데이터 JPA는 페이징 처리를 위해 <code class="language-plaintext highlighter-rouge">Pageable</code> 타입을 이용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberDataDao</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="nf">findByNameLike</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
    <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="nf">findByBlocked</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">blocked</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1은 페이지 번호, 0부터 시작한다.  10은 개수</span>
<span class="c1">// Sort 사용 가능</span>
<span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>
<span class="nc">PageRequest</span> <span class="n">pageReq</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">sort</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="n">memberDataDao</span><span class="o">.</span><span class="na">findByNameLike</span><span class="o">(</span><span class="s">"이름%"</span><span class="o">,</span> <span class="n">pageReq</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Page 리턴 타입</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">PageRequest</span> <span class="n">pageReq</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="n">page</span> <span class="o">=</span> <span class="n">memberDataDao</span><span class="o">.</span><span class="na">findByBlocked</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">pageReq</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="n">content</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span> <span class="c1">// 조회 결과 목록</span>
<span class="kt">long</span> <span class="n">totalElements</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalElements</span><span class="o">();</span> <span class="c1">// 조건에 해당하는 전체 개수</span>
<span class="kt">int</span> <span class="n">totalPages</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalPages</span><span class="o">();</span> <span class="c1">// 전체 페이지 번호</span>
<span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span> <span class="c1">// 현재 페이지 번호</span>
<span class="kt">int</span> <span class="n">numberOfElements</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getNumberOfElements</span><span class="o">()</span> <span class="c1">// 조회 결과 개수</span>
<span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="c1">// 페이지 크기</span>
</code></pre></div></div>

<p>Page 리턴 타입은 COUNT 쿼리를 실행하므로 List만 필요한 경우 리턴 타입을 List로 한다.</p>

<h2 id="58-스펙-조합을-위한-스펙-빌더-클래스">5.8 스펙 조합을 위한 스펙 빌더 클래스</h2>
<p>스펙을 조합할 때 스펙 빌더를 만들어 사용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="n">spec</span> <span class="o">=</span> <span class="nc">SpecBuilder</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="nc">MemberData</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">ifTrue</span><span class="o">(</span><span class="n">searchRequest</span><span class="o">.</span><span class="na">isOnlyNotBlocked</span><span class="o">(),</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">MemberDataSpecs</span><span class="o">.</span><span class="na">nonBlocked</span><span class="o">())</span>
                <span class="o">.</span><span class="na">ifHasText</span><span class="o">(</span><span class="n">searchRequest</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">name</span> <span class="o">-&gt;</span> <span class="nc">MemberDataSpecs</span><span class="o">.</span><span class="na">nameLike</span><span class="o">(</span><span class="n">searchRequest</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">toSpec</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberData</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">memberDataDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">spec</span><span class="o">,</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpecBuilder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">builder</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">specs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="kd">public</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">and</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">specs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">ifHasText</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span>
                                    <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">specSupplier</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">str</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">specs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">specSupplier</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">ifTrue</span><span class="o">(</span><span class="nc">Boolean</span> <span class="n">cond</span><span class="o">,</span>
                                 <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">specSupplier</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cond</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cond</span><span class="o">.</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">specs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">specSupplier</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">toSpec</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span> <span class="o">=</span> <span class="nc">Specification</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">:</span> <span class="n">specs</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">spec</span> <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">spec</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="59-동적-인스턴스-생성">5.9 동적 인스턴스 생성</h2>
<p>JPQL의 new 키워드를 통해 객체를 동적으로 생성할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderSummaryDao</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">OrderSummary</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"""    
            select new com.myshop.order.query.dto.OrderView(
                o.number, o.state, m.name, m.id, p.name
            )
            from Order o join o.orderLines ol, Member m, Product p
            where o.orderer.memberId.id = :ordererId
            and o.orderer.memberId.id = m.id
            and index(ol) = 0
            and ol.productId.id = p.id
            order by o.number.number desc
            """</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderView</span><span class="o">&gt;</span> <span class="nf">findOrderView</span><span class="o">(</span><span class="nc">String</span> <span class="n">ordererId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="510-하이버네이트-subselect-사용">5.10 하이버네이트 @Subselect 사용</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Subselect</code>는 쿼리 결과를 <code class="language-plaintext highlighter-rouge">@Entity</code>로 매핑할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Immutable</code>, <code class="language-plaintext highlighter-rouge">@Subselect</code>, <code class="language-plaintext highlighter-rouge">@Synchronize</code> 와 같이 사용한다.</li>
  <li>뷰를 수정할 수 없듯 <code class="language-plaintext highlighter-rouge">@Subselect</code>로 조회한 <code class="language-plaintext highlighter-rouge">@Entity</code> 역시 수정할 수 없다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Immutable</span>
<span class="nd">@Subselect</span><span class="o">(</span>
        <span class="s">"""
        select o.order_number as number,
        o.version,
        o.orderer_id,
        o.orderer_name,
        o.total_amounts,
        o.receiver_name,
        o.state,
        o.order_date,
        p.product_id,
        p.name as product_name
        from purchase_order o inner join order_line ol
            on o.order_number = ol.order_number
            cross join product p
        where
        ol.line_idx = 0
        and ol.product_id = p.product_id"""</span>
<span class="o">)</span>
<span class="nd">@Synchronize</span><span class="o">({</span><span class="s">"purchase_order"</span><span class="o">,</span> <span class="s">"order_line"</span><span class="o">,</span> <span class="s">"product"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderSummary</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"orderer_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">ordererId</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="kd">protected</span> <span class="nf">OrderSummary</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br />
<br /></p>

<h1 id="6-응용-서비스와-표현-영역">6. 응용 서비스와 표현 영역</h1>

<h2 id="61-표현-영역과-응용-영역">6.1 표현 영역과 응용 영역</h2>
<center><img src="/assets/images/posts/books/1/6_1_표현영역과응용영역.png" alt="표현영역과응용영역.png" width="80%" height="80%" /></center>

<p><strong>표현 영역</strong></p>
<ul>
  <li>표현 영역은 사용자의 요청을 해석한다.</li>
  <li>사용자가 실행하고 싶은 기능을 판별하고 그 기능을 제공하는 응용 서비스를 실행한다.</li>
  <li>응용 서비스가 요구하는 형식으로 사용자 요청을 변환한다.</li>
  <li>응용 서비스의 실행 결과를 사용자에게 알맞은 형식으로 응답한다.</li>
</ul>

<p><strong>응용 영역</strong></p>
<ul>
  <li>실제 사용자가 원하는 기능을 제공한다.</li>
  <li>응용 서비스는 표현 영역에 의존하지 않는다.</li>
</ul>

<h2 id="62-응용-서비스의-역할">6.2 응용 서비스의 역할</h2>
<ul>
  <li>사용자(표현 영역)가 요청한 기능을 실행한다.</li>
  <li>도메인 객체를 사용해서 요청을 처리한다.</li>
  <li>도메인 객체 간의 흐름을 제어한다.</li>
  <li>트랜잭션 처리를 담당한다.</li>
  <li>접근 제어와 이벤트 처리를 한다.</li>
</ul>

<h3 id="621-도메인-로직-넣지-않기">6.2.1 도메인 로직 넣지 않기</h3>
<p>도메인 로직은 도메인 영역에 위치하고, 응용 서비스는 도메인 로직을 구현하지 않는다.</p>

<p><strong>이유</strong></p>
<ul>
  <li>코드의 응집성이 떨어진다.</li>
  <li>여러 응용 서비스에서 동일한 도메인 로직을 구현할 가능성이 높아진다.</li>
  <li>결과적으로 코드 변경을 어렵게 만든다.</li>
</ul>

<h2 id="63-응용-서비스의-구현">6.3 응용 서비스의 구현</h2>
<p>응용 서비스는 표현 영역과 도메인 영역을 연결하는 매개체 역할을 한다.(파사드 facade)</p>

<h3 id="631-응용-서비스의-크기">6.3.1 응용 서비스의 크기</h3>
<p><strong>응용 서비스의 구현 방법</strong></p>
<ul>
  <li>한 응용 서비스 클래스에 회원 도메인 모든 기능 구현하기</li>
  <li><strong>구분되는 기능별로 응용 서비스 클래스를 따로 구현하기</strong> 👍</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 응용 서비스에서 공통되는 로직을 별도 클래스로 구현</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">MemberServiceHelper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Member</span> <span class="nf">findExistingMember</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">repo</span><span class="o">,</span> <span class="nc">String</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">member</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoMemberException</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 공통 로직을 제공하는 메서드를 응용 서비스에서 사용</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">myshop</span><span class="o">.</span><span class="na">member</span><span class="o">.</span><span class="na">application</span><span class="o">.</span><span class="na">MemberServiceHelper</span><span class="o">.*;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChangePasswordService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changePassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">memberId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">curPw</span><span class="o">,</span> <span class="nc">String</span> <span class="n">newPw</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findExistingMember</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>
        <span class="n">member</span><span class="o">.</span><span class="na">changePassword</span><span class="o">(</span><span class="n">curPw</span><span class="o">,</span> <span class="n">newPw</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="632-응용-서비스의-인터페이스와-클래스">6.3.2 응용 서비스의 인터페이스와 클래스</h3>
<p>인터페이스가 명확하게 필요하지 않다면 응용 서비스의 인터페이스 작성은 좋은 선택이 아니다. 소스 파일만 많아지고 간접 참조가 증가해서 전체 구조가 복잡해진다.</p>

<p><strong>인터페이스가 필요한 상황</strong></p>
<ul>
  <li>구현 클래스가 여러개인 경우</li>
</ul>

<h3 id="633-메서드-파라미터와-값-리턴">6.3.3 메서드 파라미터와 값 리턴</h3>
<ul>
  <li>도메인을 이용해 기능을 실행하는 데 필요한 값을 파라미터로 전달받아야 한다.</li>
  <li>각 값을 개별 파라미터로 전달받을 수도 있고 <strong>DTO를 만들어 전달</strong>받을 수도 있다.</li>
  <li>응용 서비스의 결과를 표현 영역에서 사용해야 한다면, 응용 서비스의 결과로 필요한 데이터를 리턴한다.</li>
  <li><strong>애그리거트 자체를 리턴하는 것은 응집도를 낮추어 비추천</strong>한다.</li>
</ul>

<h3 id="634-표현-영역에-의존하지-않기">6.3.4 표현 영역에 의존하지 않기</h3>
<p>표현 영역에 해당하는 HttpServletRequest, HttpSession 등을 응용 서비스에에 파라미터로 전달하면 안 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nc">ChangePasswordService</span> <span class="n">changePasswordService</span><span class="o">;</span>

<span class="nd">@PostMapping</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">sumbit</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 응용 서비스가 표현 영역을 의존하면 안된다.</span>
    <span class="n">changePasswordService</span><span class="o">.</span><span class="na">changePassword</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="635-트랜잭션-처리">6.3.5 트랜잭션 처리</h3>
<p>스프링과 같은 프레임워크가 제공하는 트랜잭션 관리 기능을 이용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
</code></pre></div></div>

<h2 id="64-표현-영역">6.4 표현 영역</h2>
<ul>
  <li>사용자가 시스템을 사용할 수 있는 흐름(화면)을 제공하고 제어한다.</li>
  <li>사용자의 요청을 알맞은 응용 서비스에 전달하고 결과를 사용자에게 제공한다.</li>
  <li>사용자의 세션을 관리한다.</li>
</ul>
<center><img src="/assets/images/posts/books/1/6_2_표현영역사용자흐름.png" alt="표현영역사용자흐름" width="60%" height="60%" /></center>

<h2 id="65-값-검증">6.5 값 검증</h2>
<p>값 검증은 표현 영역과 응용 서비스 두 곳에서 모두 수행할 수 있다. <strong>원칙적으로는 응용 서비스에서 처리</strong>한다.</p>

<p>응용 서비스를 사용하는 표현 영역의 코드가 한 곳이면 구현의 편리함을 위해 다음과 같이 역할을 나누어 검증을 수행할 수도 있다.</p>
<ul>
  <li>표현 영역: 필수 값, 값의 형식, 범위 등을 검증한다.</li>
  <li>응용 서비스: 데이터의 존재 유무와 같은 논리적 오류를 검증한다.</li>
</ul>

<h2 id="66-권한-검사">6.6 권한 검사</h2>
<p>다음 세 곳에서 권한 검사를 수행할 수 있다.</p>
<ul>
  <li>표현 영역
    <ul>
      <li>서블릿 필터</li>
    </ul>
  </li>
  <li>응용 서비스
    <ul>
      <li>AOP</li>
    </ul>
  </li>
  <li>도메인
    <ul>
      <li>직접 로직 구현</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 스프링 시큐리티 활용</span>
<span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">"hasRole('ADMIN')"</span><span class="o">)</span>
</code></pre></div></div>

<h2 id="67-조회-전용-기능과-응용-서비스">6.7 조회 전용 기능과 응용 서비스</h2>
<p>응용 서비스가 사용자 요청 기능을 실행하는 데 별다른 기여를 하지 못한다면 굳이 서비스를 만들지 않아도 된다.</p>

<p><img src="/assets/images/posts/books/1/6_4_응용서비스생략.png" alt="응용서비스생략" width="70%" height="70%" /></p>

<p><br />
<br />
<br /></p>

<h1 id="7-도메인-서비스">7. 도메인 서비스</h1>
<h2 id="71-여러-애그리거트가-필요한-기능">7.1 여러 애그리거트가 필요한 기능</h2>
<p>한 애그리거트에 넣기 애매한, 여러 애그리거트가 필요한 기능이라면 별도 도메인 서비스로 구현한다.</p>

<h2 id="72-도메인-서비스">7.2 도메인 서비스</h2>
<p>도메인 서비스는 도메인 영역에 위치한 도메인 로직을 표현할 때 사용한다. 주로 다음 상황에서 도메인 서비스를 사용한다.</p>
<ul>
  <li>계산 로직: 여러 애그리거트가 필요한 계산로직이나, 한 애그리거트에 넣기에는 다소 복잡한 계산 로직</li>
  <li>외부 시스템 연동이 필요한 도메인 로직: 구현하기 위해 타 시스템을 사용해야 하는 도메인 로직</li>
</ul>

<h3 id="721-계산-로직과-도메인-서비스">7.2.1 계산 로직과 도메인 서비스</h3>

<p><strong>도메인 서비스를 사용하는 주체</strong></p>
<ul>
  <li>애그리거트</li>
  <li>응용 서비스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 애그리거트가 사용</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>
    <span class="c1">// 도메인 서비스</span>
    <span class="kd">private</span> <span class="nc">DiscountCalculationService</span> <span class="n">discountCalculationService</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Order</span> <span class="nf">createOrder</span><span class="o">(</span><span class="nc">OrderNo</span> <span class="n">orderNo</span><span class="o">,</span> <span class="nc">OrderRequest</span> <span class="n">orderReq</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">(</span><span class="n">orderReq</span><span class="o">.</span><span class="na">getOrdererId</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">(</span><span class="n">orderNo</span><span class="o">,</span> <span class="o">...</span><span class="na">생략</span><span class="o">);</span>
        <span class="c1">// 애그리거트 객체에 도메인 서비스 전달</span>
        <span class="n">order</span><span class="o">.</span><span class="na">calculateAmounts</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">discountCalculationService</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getGrade</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 응용 서비스가 사용</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransferService</span> <span class="o">{</span> <span class="c1">// 도메인 서비스</span>

    <span class="c1">// 도메인 서비스의 기능을 실행할 때 애그리거트를 전달</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Account</span> <span class="n">fromAcc</span><span class="o">,</span> <span class="nc">Account</span> <span class="n">toAcc</span><span class="o">,</span> <span class="nc">Money</span> <span class="n">amounts</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">fromAcc</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">amounts</span><span class="o">);</span>
        <span class="n">toAcc</span><span class="o">.</span><span class="na">credit</span><span class="o">(</span><span class="n">amounts</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>특정 기능이 응용 서비스인지 도메인 서비스인지 확인하는 방법</strong></p>

<p>아래의 행위가 일어나면 도메인 서비스</p>
<ul>
  <li>애그리거트의 상태를 변경</li>
  <li>애그리거트의 상태 값을 계산</li>
</ul>

<h3 id="722-외부-시스템-연동과-도메인-서비스">7.2.2 외부 시스템 연동과 도메인 서비스</h3>
<p>시스템 간 연동은 HTTP API 호출로 이루어질 수 있지만, 도메인 입장에서는 도메인 로직으로 볼 수 있다. <strong>도메인 관점에서 인터페이스를 작성</strong>한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 도메인 서비스</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SurveyPermissionChecker</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">hasUserCreationPermission</span><span class="o">(</span><span class="nc">String</span> <span class="n">userId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//응용 서비스는 도메인 서비스를 이용</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreateSurveyService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">SurveyPermissionChecker</span> <span class="n">surveyPermissionChecker</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">createSurvey</span><span class="o">(</span><span class="nc">CreateSurveyRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validate</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="c1">// 도메인 서비스를 이용해서 외부 시스템 연동을 표현</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">surveyPermissionChecker</span><span class="o">.</span><span class="na">hasUserCreationPermission</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getRequestorId</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoPermissionException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">SurveyPermissionChecker</code> 인터페이스를 구현한 클래스는 인프라스트럭처 영역에 위치한다.</p>

<h3 id="723-도메인-서비스의-패키지-위치">7.2.3 도메인 서비스의 패키지 위치</h3>
<center><img src="/assets/images/posts/books/1/7_2_도메인서비스위치.png" alt="도메인서비스위치" width="60%" height="60%" /></center>

<p><br /></p>

<p>도메인 서비스의 개수가 많거나 명시적으로 구분하고 싶다면 아래와 같이 하위 패키지로 구분한다.</p>
<ul>
  <li>domain
    <ul>
      <li>domain.model</li>
      <li>domain.service</li>
      <li>domain.repository</li>
    </ul>
  </li>
</ul>

<h3 id="724-도메인-서비스의-인터페이스와-클래스">7.2.4 도메인 서비스의 인터페이스와 클래스</h3>
<p>도메인 서비스의 로직이 고정되어 있지 않은 경우 <strong>도메인 서비스 자체를 인터페이스로 구현</strong>하고 이를 구현한 클래스를 둘 수도 있다.</p>

<center><img src="/assets/images/posts/books/1/7_2_도메인서비스인터페이스.png" alt="도메인서비스인터페이스" width="80%" height="80%" /></center>

<p><br />
<br />
<br /></p>

<h1 id="8-애그리거트-트랜잭션-관리">8. 애그리거트 트랜잭션 관리</h1>

<h2 id="81-애그리거트와-트랜잭션">8.1 애그리거트와 트랜잭션</h2>
<center><img src="/assets/images/posts/books/1/8_1_트랜잭션.png" alt="트랜잭션" width="60%" height="60%" /></center>

<p>트랜잭션 처리 방식</p>
<ul>
  <li>선점 잠금 (Pessimistic Lock, 비관적 잠금)</li>
  <li>비선점 잠금 (Optimistic Lock, 낙관적 잠금)</li>
</ul>

<h2 id="82-선점-잠금">8.2 선점 잠금</h2>
<center><img src="/assets/images/posts/books/1/8_2_선점잠금.png" alt="선점잠금" width="60%" height="60%" /></center>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JPA</span>
<span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">orderNo</span><span class="o">,</span> <span class="nc">LockModeType</span><span class="o">.</span><span class="na">PESSIMISTIC_WRITE</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 스프링 데이터 JPA</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberREpository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">,</span> <span class="nc">MemberId</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Lock</span><span class="o">(</span><span class="nc">LockModeType</span><span class="o">.</span><span class="na">PESSIMISTIC_WRITE</span><span class="o">)</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">MemberId</span> <span class="n">memberId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="821-선점-잠금과-교착-상태">8.2.1 선점 잠금과 교착 상태</h3>
<p>다음 상황은 교착 상태에 빠진다.</p>
<ol>
  <li>스레드 1: 🐳 애그리거트에 대한 선점 잠금 구함</li>
  <li>스레드 2: 🦍 애그리거트에 대한 선점 잠금 구함</li>
  <li>스레드 1: 🦍 애그리거트에 대한 선점 잠금 시도</li>
  <li>스레드 2: 🐳 애그리거트에 대한 선점 잠금 시도</li>
</ol>

<p><br /></p>

<p><strong>해결 방법</strong><br />
힌트를 제공해 최대 대기시간을 지정한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JPA</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">hints</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">hints</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"javax.persistence.lock.timeout"</span><span class="o">,</span> <span class="mi">2000</span><span class="o">);</span>
<span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">orderNo</span><span class="o">,</span> <span class="nc">LockModeType</span><span class="o">.</span><span class="na">PESSIMISTIC_WRITE</span><span class="o">,</span> <span class="n">hints</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 스프링 데이터 JPA</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberREpository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">,</span> <span class="nc">MemberId</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Lock</span><span class="o">(</span><span class="nc">LockModeType</span><span class="o">.</span><span class="na">PESSIMISTIC_WRITE</span><span class="o">)</span>
    <span class="nd">@QueryHints</span><span class="o">({</span>
        <span class="nd">@QueryHint</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"javax.persistence.lock.timeout"</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s">"2000"</span><span class="o">)</span>
    <span class="o">})</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">MemberId</span> <span class="n">memberId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>DBMS에 따라 교착 상태에 빠진 커넥션을 처리하는 방식이 다르다. 사용하는 DBMS에 대해 JPA가 어떤 식으로 대기시간을 처리하는지 반드시 확인해야 한다.</p>

<h2 id="83-비선점-잠금">8.3 비선점 잠금</h2>
<p>선점 잠금으로 모든 트랜잭션 충돌 문제가 해결되는 것은 아니다</p>
<center><img src="/assets/images/posts/books/1/8_3_비선점잠금.png" alt="비선점잠금" width="60%" height="60%" /></center>

<p>비선점 잠금은 동시에 접근하는 것을 막는 대신 변경한 데이터를 실제 DBMS에 반영하는 시점에 변경 가능 여부를 확인하는 방식이다.</p>

<p>비선점 잠금을 구현하려면 애그리거트에 버전으로 사용할 숫자 타입 프로퍼티를 추가해야 한다. 애그리거트를 수정할 때마다 버전으로 사용할 프로퍼티 값이 1씩 증가한다.</p>

<center><img src="/assets/images/posts/books/1/8_3_비선점잠금트랜잭션.png" alt="비선점잠금트랜잭션" width="60%" height="60%" /></center>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JPA</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"purchase_order"</span><span class="o">)</span>
<span class="nd">@Access</span><span class="o">(</span><span class="nc">AccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="nd">@Version</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<p>JPA 엔티티가 변경되어 UPDATE 쿼리를 실행할 때 <code class="language-plaintext highlighter-rouge">@Version</code>에 명시한 필드를 이용해서 비선점 잠금 쿼리를 실행한다. 응용 서비스는 버전에 대해 알 필요가 없다.</p>

<p>트랜잭션 충돌이 발생하면 <code class="language-plaintext highlighter-rouge">OptimisticLockingFailureException</code>이 발생한다.</p>

<p><br /></p>

<p><strong>비선점 잠금 확장</strong></p>
<center><img src="/assets/images/posts/books/1/8_3_비선점잠금트랜잭션확장.png" alt="비선점잠금트랜잭션확장" width="60%" height="60%" /></center>

<p><br /></p>

<p>비선점 잠금 방식을 여러 트랜잭션으로 확장하려면 애그리거트 버전 정보를 응용 서비스에 전달한다. 응용 서비스는 전달받은 버전 값을 이용해서 애그리거트 버전과 일치하는지 확인하고, 일치하는 경우에만 기능을 수행한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StartShippingRequest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">orderNumber</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 응용 서비스</span>
<span class="kd">public</span> <span class="nc">StartShippingService</span> <span class="o">{</span>

    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">"hasRole('ADMIN')"</span><span class="o">)</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startShipping</span><span class="o">(</span><span class="nc">StartShippingRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderNo</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getOrderNumber</span><span class="o">()));</span>
        <span class="c1">// version 확인</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">order</span><span class="o">.</span><span class="na">matchVersion</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getVersion</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">VersionConflictException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="831-강제-버전-증가">8.3.1 강제 버전 증가</h3>
<p>기능 실행 도중 루트가 아닌 다른 엔티티의 값만 변경된다면, JPA는 루트 엔티티 버전 값을 증가시키지 않는다.</p>

<p>JPA는 이런 문제를 처리할 수 있도록 EntityManager#find() 메서드로 엔티티를 구할 때 강제로 버전 값을 증가시키는 잠금 모드를 지원한다. <code class="language-plaintext highlighter-rouge">LockModeType.OPTIMISTIC_FORCE_INCREMENT</code>를 사용하면 해당 엔티티의 상태가 변경되었는지에 상관없이 트랜잭션 종료 시점에 버전 값 증가 처리를 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JPA</span>
<span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">orderNo</span><span class="o">,</span> <span class="nc">LockModeType</span><span class="o">.</span><span class="na">OPTIMISTIC_FORCE_INCREMENT</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 스프링 데이터 JPA</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberREpository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">,</span> <span class="nc">MemberId</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Lock</span><span class="o">(</span><span class="nc">LockModeType</span><span class="o">.</span><span class="na">OPTIMISTIC_FORCE_INCREMENT</span><span class="o">)</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">MemberId</span> <span class="n">memberId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="84-오프라인-선점-잠금">8.4 오프라인 선점 잠금</h2>
<p>누군가 수정 화면을 보고 있을 때 수정 화면 자체를 실행하지 못하게 하는 것이 오프라인 선점 잠금 방식이다.</p>
<center><img src="/assets/images/posts/books/1/8_4_오프라인선점잠금방식.png" alt="오프라인선점잠금방식" width="60%" height="60%" /></center>

<h3 id="841-오프라인-선점-잠금을-위한-lockmanager-인터페이스와-관련-클래스">8.4.1 오프라인 선점 잠금을 위한 LockManager 인터페이스와 관련 클래스</h3>
<p>필요 기능</p>
<ul>
  <li>잠금 선점 시도</li>
  <li>잠금 확인</li>
  <li>잠금 해제</li>
  <li>잠금 유효시간</li>
</ul>

<p>구현 코드는 <a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">책</a>에서 확인해주세요. 🔎</p>

<h3 id="842-db를-이용한-lockmanager-구현">8.4.2 DB를 이용한 LockManager 구현</h3>
<p>구현 코드는 <a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">책</a>에서 확인해주세요. 🔎</p>

<p><br />
<br />
<br /></p>

<h1 id="9-도메인-모델과-바운디드-컨텍스트">9. 도메인 모델과 바운디드 컨텍스트</h1>
<h2 id="91-도메인-모델과-경계">9.1 도메인 모델과 경계</h2>
<p>논리적으로 같은 존재처럼 보이지만 하위 도메인에 따라 다른 용어를 사용하는 경우도 있다.</p>
<center><img src="/assets/images/posts/books/1/9_1_하위도메인별용어.png" alt="하위도메인별용어" width="60%" height="60%" /></center>

<p>이렇게 하위 도메인마다 같은 용어라도 의미가 다르고 같은 대상이라도 지칭하는 용어가 다를 수 있기 때문에 한개의 모델로 모든 하위 도메인을 표현하려는 시도는 올바른 방법이 아니며 표현할 수도 없다.</p>

<p>모델은 특정한 컨텍스트(문맥) 하에서 완전한 의미를 갖는다. 같은 제품이라도 카탈로그 컨텍스트와 재고 컨텍스트에서 의미가 서로 다르다. 이렇게 구분되는 경계를 갖는 컨텍스트를 DDD에서는 바운디드 컨텍스트(Bounded Context)라고 부른다.</p>

<h2 id="92-바운디드-컨텍스트">9.2 바운디드 컨텍스트</h2>
<ul>
  <li>도메인 모델의 경계를 결정한다.</li>
  <li>용어를 기준으로 구분한다.</li>
  <li>한 개의 바운디드 컨텍스트는 논리적으로 한 개의 모델을 갖는다.</li>
  <li>한 개의 바운디드 컨텍스트가 여러 하위 도메인을 포함하더라도, 하위 도메인마다 구분되는 패키지를 갖도록 구현해야 한다.</li>
</ul>

<p><br /></p>

<p><strong>아직 명확하게 구분되지 않은 경우 두 하위 도메인을 하나의 바운디드 컨텍스트에서 구현하기도 한다.</strong><br />
<img src="/assets/images/posts/books/1/9_2_바운디드컨텍스트.png" alt="바운디드컨텍스트" width="70%" height="70%" /></p>

<p><br /></p>

<p><strong>한 개의 바운디드 컨텍스트가 여러 하위 도메인을 포함하더라도, 하위 도메인마다 구분되는 패키지를 갖도록 구현해야 한다.</strong><br />
<img src="/assets/images/posts/books/1/9_2_바운디드컨텍스트2.png" alt="바운디드컨텍스트" width="70%" height="70%" /></p>

<p><br /></p>

<p><strong>같은 상품이라도 각자 구현하는 하위 도메인에 맞는 모델을 갖는다.</strong><br />
<img src="/assets/images/posts/books/1/9_2_바운디드컨텍스트3.png" alt="바운디드컨텍스트" width="70%" height="70%" /></p>

<h2 id="93-바운디드-컨텍스트-구현">9.3 바운디드 컨텍스트 구현</h2>
<p>바운디드 컨텍스트는 도메인 기능을 사용자에게 제공하는 데 필요한 표현 영역, 응용 서비스, 인프라스트럭처, 테이블 영역을 포함한다.</p>
<center><img src="/assets/images/posts/books/1/9_3_바운디드컨텍스트영역.png" alt="바운디드컨텍스트영역" width="70%" height="70%" /></center>

<p><br />
<br /></p>

<p>CQRS (Command Query Responsibility Segregation, 명령 조회 책임 분리) 패턴을 사용할 수도 있다.</p>
<center><img src="/assets/images/posts/books/1/9_3_바운디드컨텍스트CQRS.png" alt="바운디드컨텍스트CQRS" width="60%" height="60%" /></center>

<p><br />
<br /></p>

<p>바운디드 컨텍스트는 UI를 갖지 않을 수도 있다.</p>
<center><img src="/assets/images/posts/books/1/9_3_바운디드컨텍스트UI미포함.png" alt="바운디드컨텍스트UI미포함" width="60%" height="60%" /></center>

<p><br />
<br /></p>

<p>바운디드 컨텍스트는 UI서버를 통해 간접적으로 브라우저와 통신할 수도 있다. 여기서 UI서버는 파사드 역할을 수행한다.</p>
<center><img src="/assets/images/posts/books/1/9_3_바운디드컨텍스트UI서버.png" alt="바운디드컨텍스트UI서버" width="60%" height="60%" /></center>

<h2 id="94-바운디드-컨텍스트-간-통합">9.4 바운디드 컨텍스트 간 통합</h2>
<p>바운디드 컨텍스트 간 통합이 필요할 때도 있다.</p>

<p><strong>REST API를 이용한 직접 통합</strong></p>
<ul>
  <li>통신</li>
</ul>

<p><img src="/assets/images/posts/books/1/9_4_바운디드컨텍스트간통합.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><br /></p>

<ul>
  <li>도메인에 맞는 모델로 변환</li>
</ul>

<p><img src="/assets/images/posts/books/1/9_4_바운디드컨텍스트간통합2.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><br />
<br /></p>

<p><strong>메시지 큐를 사용하여 통합</strong>
<img src="/assets/images/posts/books/1/9_4_바운디드컨텍스트간통합3.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><img src="/assets/images/posts/books/1/9_4_바운디드컨텍스트간통합4.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><br />
<br /></p>

<p><strong>마이크로서비스와 바운디드 컨텍스트</strong><br />
마이크로서비스는 애플리케이션을 작은 서비스로 나누어 개발하는 아키텍처 스타일이다. 개별 서비스를 독립된 프로세스로 실행하고 각 서비스가 REST API나 메시징을 이용해서 통신하는 구조를 갖는다.</p>

<p>바운디드 컨텍스트를 마이크로서비스로 구현하면 자연스럽게 컨텍스트별로 모델이 분리된다. 마이크로서비스마다 프로젝트를 생성하므로 <strong>바운디드 컨텍스트마다 프로젝트를 만들게 된다</strong>. 이것은 코드 수준에서 모델을 분리하여 두 바운디드 컨텍스트의 모델이 섞이지 않도록 해준다.</p>

<h2 id="95-바운디드-컨텍스트-간-관계">9.5 바운디드 컨텍스트 간 관계</h2>
<p>바운디드 컨텍스트는 어떤 식으로든 연결되기 때문에 두 바운디드 컨텍스트는 다양한 방식으로 관계를 맺는다.</p>

<p><strong>REST API</strong><br />
<img src="/assets/images/posts/books/1/9_5_바운디드컨텍스트관계.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><br />
<br /></p>

<p><strong>단일 API</strong><br />
<img src="/assets/images/posts/books/1/9_5_바운디드컨텍스트관계2.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><br />
<br /></p>

<p><strong>독립 방식</strong><br />
그냥 서로 통합하지 않는 방식이다. 서로 독립적으로 모델을 발전 시킨다. 하지만 규모가 커질수록 한계가 있으므로 그 전에 두 바운디드 컨텍스트를 통합해야 한다.</p>

<p><img src="/assets/images/posts/books/1/9_5_바운디드컨텍스트관계3.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<p><img src="/assets/images/posts/books/1/9_5_바운디드컨텍스트관계4.png" alt="바운디드컨텍스트간통합" width="80%" height="80%" /></p>

<h2 id="96-컨텍스트-맵">9.6 컨텍스트 맵</h2>
<p>개별 바운디드 컨텍스트에 매몰되면 전체를 보지 못할 때가 있다. 전체 바운디드 컨텍스트 간 관계를 볼 수 있는 지도가 필요한데 그것이 바로 컨텍스트 맵이다.</p>

<p><img src="/assets/images/posts/books/1/9_6_컨텍스트맵.png" alt="컨텍스트맵" width="80%" height="80%" /></p>

<p><br />
<br />
<br /></p>

<h1 id="10-이벤트">10. 이벤트</h1>
<h2 id="101-시스템-간-강결합-문제">10.1 시스템 간 강결합 문제</h2>
<ul>
  <li>트렌젝션 문제</li>
  <li>외부 서비스의 성능에 영향을 받음</li>
  <li>설계상 문제 (로직이 섞임)</li>
  <li>기능 추가의 어려움</li>
</ul>

<h2 id="102-이벤트-개요">10.2 이벤트 개요</h2>
<p>여기서 사용되는 이벤트라는 용어는 ‘과거에 벌어진 어떤 것’을 의미한다.</p>
<ul>
  <li>이벤트 발생</li>
  <li>이벤트에 반응하여 동작 수행</li>
</ul>

<h3 id="1021-이벤트-관련-구성요소">10.2.1 이벤트 관련 구성요소</h3>
<ul>
  <li>이벤트</li>
  <li>이벤트 생성 주체</li>
  <li>이벤트 디스패처 (퍼블리셔)</li>
  <li>이벤트 핸들러 (구독자)</li>
</ul>

<p><img src="/assets/images/posts/books/1/10_2_이벤트구성요소.png" alt="이벤트구성요소" width="80%" height="80%" /></p>

<p>도메인 모델에서 이벤트 생성 주체는 엔티티, 밸류, 도메인 서비스와 같은 도메인 객체이다. 도메인 객체는 도메인 로직을 실행해서 상태가 바뀌면 관련 이벤트를 발생시킨다.</p>

<h3 id="1022-이벤트의-구성">10.2.2 이벤트의 구성</h3>
<p>이벤트는 발생한 이벤트에 대한 정보를 담는다.</p>
<ul>
  <li>이벤트 종류: 클래스 이름으로 이벤트 종류를 표현</li>
  <li>이벤트 발생 시간</li>
  <li>추가 데이터: 주문번호, 시규배송지 정보 등 이벤트와 관련된 정보</li>
</ul>

<h3 id="1023-이벤트-용도">10.2.3 이벤트 용도</h3>
<ul>
  <li>후처리를 실행하기 위한 트리거</li>
  <li>서로 다른 시스템 간의 데이터 동기화</li>
</ul>

<p><img src="/assets/images/posts/books/1/10_2_이벤트용도.png" alt="이벤트용도" width="80%" height="80%" /></p>

<h3 id="1024-이벤트-장점">10.2.4 이벤트 장점</h3>
<ul>
  <li>서로 다른 도메인 로직이 섞이는 것을 방지</li>
  <li>도메인 로직에 영향 없이 기능 확장</li>
</ul>

<p><img src="/assets/images/posts/books/1/10_2_이벤트장점.png" alt="이벤트장점" width="80%" height="80%" /></p>

<h2 id="103-이벤트-핸들러-디스패처-구현">10.3 이벤트, 핸들러, 디스패처 구현</h2>
<p>이벤트와 관련된 코드</p>
<ul>
  <li>이벤트 클래스: 이벤트를 표현한다.</li>
  <li>디스패처: 스프링이 제공하는 ApplicationEventPublisher를 이용한다.</li>
  <li>Events: 이벤트를 발행한다. 이벤트 발행을 위해 ApplicationEventPublisher를 사용한다.</li>
  <li>이벤트 핸들러: 이벤트를 수신해서 처리한다. 스프링이 제공하는 기능을 사용한다.</li>
</ul>

<h3 id="1031-이벤트-클래스">10.3.1 이벤트 클래스</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 공통 추상 클래스</span>
<span class="kn">package</span> <span class="nn">com.myshop.common.event</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Event</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Event</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">timestamp</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderCanceledEvent</span> <span class="kd">extends</span> <span class="nc">Event</span> <span class="o">{</span>

    <span class="c1">// 이벤트는 핸들러에서 이벤트를 처리하는 데 필요한 데이터를 포함</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">orderNumber</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderCanceledEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderNumber</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="1032-events-클래스와-applicationeventpublisher">10.3.2 Events 클래스와 ApplicationEventPublisher</h3>
<p>이벤트 발생과 출판을 위해 스프링이 제공하는 <code class="language-plaintext highlighter-rouge">ApplicationEventPublisher</code>를 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 설정</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventsConfiguration</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">InitializingBean</span> <span class="nf">eventsInitializer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Events</span><span class="o">.</span><span class="na">setPublisher</span><span class="o">(</span><span class="n">applicationContext</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Events는 ApplicationEventPublisher를 사용해서 이벤트를 발생</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Events</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">ApplicationEventPublisher</span> <span class="n">publisher</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setPublisher</span><span class="o">(</span><span class="nc">ApplicationEventPublisher</span> <span class="n">publisher</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Events</span><span class="o">.</span><span class="na">publisher</span> <span class="o">=</span> <span class="n">publisher</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">raise</span><span class="o">(</span><span class="nc">Object</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">publisher</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">publisher</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="1033-이벤트-발생과-이벤트-핸들러">10.3.3 이벤트 발생과 이벤트 핸들러</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 이벤트 발생</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span><span class="na">생략</span><span class="o">...</span>
        <span class="nc">Events</span><span class="o">.</span><span class="na">raise</span><span class="o">(</span><span class="k">new</span> <span class="nc">OrderCanceledEvent</span><span class="o">(</span><span class="n">number</span><span class="o">.</span><span class="na">getNumber</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 이벤트 핸들러</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderCanceledEventHandler</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">RefundService</span> <span class="n">refundService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderCanceledEventHandler</span><span class="o">(</span><span class="nc">RefundService</span> <span class="n">refundService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">refundService</span> <span class="o">=</span> <span class="n">refundService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">OrderCanceledEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">OrderCanceledEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">refundService</span><span class="o">.</span><span class="na">refund</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getOrderNumber</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="1034-흐름-정리">10.3.4 흐름 정리</h3>
<p><img src="/assets/images/posts/books/1/10_3_이벤트흐름.png" alt="이벤트흐름" width="80%" height="80%" /></p>

<h2 id="104-동기-이벤트-처리-문제">10.4 동기 이벤트 처리 문제</h2>
<ul>
  <li>외부 연동 과정에서 익셉션이 발생하면 트랜잭션 처리는?</li>
  <li>이벤트 처리하는 코드가 느려지거나 익셉션이 발생하면?</li>
</ul>

<h2 id="105-비동기-이벤트-처리">10.5 비동기 이벤트 처리</h2>
<ul>
  <li>로컬 핸들러를 비동기로 실행하기</li>
  <li>메시지 큐를 사용하기</li>
  <li>이벤트 저장소와 이벤트 포워더 사용하기</li>
  <li>이벤트 저장소와 이벤트 제공 API 사용하기</li>
</ul>

<h3 id="1051-로컬-핸들러-비동기-실행">10.5.1 로컬 핸들러 비동기 실행</h3>
<p>이벤트 핸들러를 별도 스레드로 실행한다. 스프링이 제공하는 <code class="language-plaintext highlighter-rouge">@Async</code> 에너테이션을 사용하면 손쉽게 비동기로 이벤트 핸들러를 실행할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableAsync</span>  <span class="c1">// 기능 활성화</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShopApplication</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ShopApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 핸들러</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderCanceledEventHandler</span> <span class="o">{</span>

    <span class="nd">@Async</span> <span class="c1">// @Async 에너테이션 사용</span>
    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">OrderCanceledEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">OrderCanceledEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">refundService</span><span class="o">.</span><span class="na">refund</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getOrderNumber</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="1052-메시징-시스템을-이용한-비동기-구현">10.5.2 메시징 시스템을 이용한 비동기 구현</h3>
<p>Kafka나 RabbitMQ와 같은 메시징 시스템을 사용</p>
<ul>
  <li>RabbitMQ
    <ul>
      <li>글로벌 트랜잭션 지원</li>
    </ul>
  </li>
  <li>Kafka
    <ul>
      <li>글로벌 트랜잭션 지원 X</li>
      <li>다른 메시징 시스템에 비해 <strong>높은 성능</strong></li>
    </ul>
  </li>
</ul>

<p><img src="/assets/images/posts/books/1/10_5_이벤트메시지큐.png" alt="이벤트메시지큐" width="80%" height="80%" /></p>

<h3 id="1053-이벤트-저장소를-이용한-비동기-처리">10.5.3 이벤트 저장소를 이용한 비동기 처리</h3>
<p>이벤트를 일단 DB에 저장한 뒤에 별도 프로그램을 이용해서 이벤트 핸들러에 전달</p>

<p><img src="/assets/images/posts/books/1/10_5_이벤트저장소이용포워더.png" alt="이벤트저장소이용포워더" width="80%" height="80%" /></p>

<p><img src="/assets/images/posts/books/1/10_5_이벤트저장소이용API.png" alt="이벤트저장소이용API" width="80%" height="80%" /></p>

<p><br /></p>

<p>API방식과 포워더 방식의 차이점은 이벤트를 전달하는 방식에 있다.</p>
<ul>
  <li>포워더
    <ul>
      <li>포워더를 이용해서 이벤트를 외부에 전달.</li>
      <li>이벤트를 어디까지 처리했는지 추적하는 역할이 포워더에 있다.</li>
    </ul>
  </li>
  <li>API
    <ul>
      <li>외부 핸들러가 API 서버를 통해 이벤트 목록을 가져감.</li>
      <li>이벤트를 어디까지 처리했는지 추적하는 역할이 외부 핸들러에 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>구현 방법은 책 참고</strong><br />
…생략…</p>

<p><br /></p>

<p><strong>자동 증가 칼럼 주의 사항</strong></p>

<p><a href="https://javacan.tistory.com/entry/MySQL-auto-inc-col-gotcha" target="_blank">자동 증가 칼럼 주의 사항 링크</a></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 트랜잭션 커밋 시점에 따른 ID 값
시간 흐름 ---&gt;  
트랜잭션 1: 1, 2       5, 6
트랜잭션 2:       3, 4      7, 8
</code></pre></div></div>

<h2 id="106-이벤트-적용-시-추가-고려-사항">10.6 이벤트 적용 시 추가 고려 사항</h2>
<ul>
  <li><strong>이벤트 소스를 EventEntry에 추가할지?</strong>
    <ul>
      <li>EventEntry는 이벤트 발생 주체에 대한 정보를 갖지 않는다.</li>
      <li>특정 주체가 발생시킨 이벤트만 조회하는 기능을 구현할 수 없다.</li>
      <li>이 기능을 구현하려면 이벤트에 발생 주체 정보를 추가해야 한다.</li>
    </ul>
  </li>
  <li><strong>포워더에서 전송 실패를 얼마나 허용할지?</strong>
    <ul>
      <li>포워더는 이벤트 전송에 실패하면 실패한 이벤트부터 다시 읽어와 전송을 시도한다.</li>
      <li>특정 이벤트가 계속 실패한다면?</li>
      <li>실패한 이벤트의 재전송 횟수 제한을 두어야 한다.</li>
      <li>실패한 이벤트는 실패용 DB나 메시지 큐에 저장한다.</li>
    </ul>
  </li>
  <li><strong>이벤트 손실은?</strong>
    <ul>
      <li>이벤트 저장소를 사용하면 이벤트 발생과 이벤트 저장을 한 트랜잭션으로 처리하기 때문에 트랜잭션에 성공하면 이벤트가 저장소에 보관된다는 것을 보장할 수 있다.</li>
      <li>이벤트를 비동기로 처리할 경우 이벤트 처리에 실패하면 이벤트를 유실하게 된다.</li>
    </ul>
  </li>
  <li><strong>이벤트 순서는?</strong>
    <ul>
      <li>이벤트 발생 순서대로 외부 시스템에 전달해야 할 경우는 이벤트 저장소를 사용한다.</li>
      <li>메시징 시스템은 사용 기술에 따라 이벤트 발생 순서와 메시지 순서가 다를 수 있다.</li>
    </ul>
  </li>
  <li><strong>이벤트 재처리는?</strong>
    <ul>
      <li>이벤트의 순번을 기억한다.</li>
      <li>이벤트 멱등성으로 처리한다</li>
    </ul>
  </li>
</ul>

<p><strong>멱등성이란?</strong><br />
연산을 여러번 적용해도 결과가 달라지지 않는 성질을 멱등성이라고 한다.</p>

<h3 id="1061-이벤트-처리와-db-트랜잭션-고려">10.6.1 이벤트 처리와 DB 트랜잭션 고려</h3>
<p>이벤트 처리를 동기로 하든 비동기로 하든 이벤트 처리 실패와 트랜잭션 실패를 함께 고려해야 한다. 트랜잭션 실패와 이벤트 처리 실패 모두 고려하면 복잡해지므로 경우의 수를 줄이면 도움이 된다. 경우의 수를 줄이는 방법은 <strong>트랜잭션이 성공할 때만 이벤트 핸들러를 실행하는 것이다.</strong></p>

<p>스프링은 <code class="language-plaintext highlighter-rouge">@TransactionalEventListener</code> 에너테이션을 지원한다. 이 애너테이션은 트랜잭션 상태에 따라 이벤트 핸들러를 실행할 수 있게 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@TransactionalEventListener</span><span class="o">(</span>
        <span class="n">classes</span> <span class="o">=</span> <span class="nc">OrderCanceledEvent</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
        <span class="n">phase</span> <span class="o">=</span> <span class="nc">TransactionPhase</span><span class="o">.</span><span class="na">AFTER_COMMIT</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">OrderCanceledEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">refundService</span><span class="o">.</span><span class="na">refund</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getOrderNumber</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br />
<br /></p>

<h1 id="11-cqrs">11. CQRS</h1>
<h2 id="111-단일-모델의-단점">11.1 단일 모델의 단점</h2>
<p>조회 기능을 구현하려면 여러 애그리거트에서 데이터를 가져와야 할 경우가 많다. 이 때 식별자를 이용한 참조 방식이든, 직접 참조하는 방식이든 고민해야 할 것들이 많다. 이는 구현 복잡도를 높인다.</p>

<p>이런 구현 복잡도를 낮추는 간단한 방법이 바로 CQRS (Command Query Responsibility Segregation, 명령 조회 책임 분리)다.</p>

<h2 id="112-cqrs">11.2 CQRS</h2>

<p><img src="/assets/images/posts/books/1/11_2_CQRS패턴.png" alt="CQRS패턴" width="80%" height="80%" /></p>

<p><br /></p>

<p><strong>CQRS를 사용하면 각 모델에 맞는 구현 기술을 선택할 수 있다.</strong></p>

<p><img src="/assets/images/posts/books/1/11_2_CQRS_3.png" alt="CQRS" width="70%" height="70%" /></p>

<p><img src="/assets/images/posts/books/1/11_2_CQRS_2.png" alt="CQRS_2" width="70%" height="70%" /></p>

<p>단순히 데이터를 읽어와 조회하는 기능은 응용 서비스를 제외할 수도 있다.</p>

<p><br /></p>

<p><strong>CQRS를 사용하면 각 모델에 맞는 데이터 저장소를 선택할 수 있다.</strong></p>

<p><img src="/assets/images/posts/books/1/11_2_CQRS_4.png" alt="CQRS" width="70%" height="70%" /></p>

<p>명령 모델은 트랜잭션을 지원하는 RDBMS를 사용하고, 조회 모델은 조회 성능이 좋은 메모리 기반 NoSQL을 사용할 수 있다.</p>

<h3 id="1121-웹과-cqrs">11.2.1 웹과 CQRS</h3>
<p>일반적인 웹 서비스는 <strong>상태를 변경하는 요청보다 상태를 조회하는 요청이 많다</strong>. 대규모 트래픽이 발생하는 웹 서비스는 알게 모르게 CQRS를 적용하게 된다. <strong>조회 속도를 높이기 위해 별도 처리를 하고 있다면 CQRS를 적용하자</strong>. 이를 통해 <strong>조회 기능 때문에 명령 모델이 복잡해지는 것을 막을 수 있고, 명령 모델에 관계없이 조회 기능에 특화된 구현 기법을 보다 쉽게 적용할 수 있다</strong>.</p>

<h3 id="1122-cqrs-장단점">11.2.2 CQRS 장단점</h3>
<ul>
  <li>장점
    <ul>
      <li>명령 모델을 구현할 때 도메인 자체에 집중할 수 있다.</li>
      <li>조회 성능 향상에 유리</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>구현해야 할 코드가 더 많다.</li>
      <li>더 많은 구현 기술이 필요하다.</li>
    </ul>
  </li>
</ul>

<p>장단점을 고려해 CQRS 패턴 도입 여부를 결정한다. 도메인이 복잡하지 않은데 CQRS를 도입하면 유지 비용만 높아진다. 반면 트래픽이 높은 서비스인데 단일 모델을 고집하면 유지 보수 비용이 오히려 높아질 수 있으므로 CQRS 도입을 고려하자.</p>

<p><br />
<br />
<br />
<br /></p>

<p><strong>감사합니다</strong> 🙇🏻‍♂️</p>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</a></li>
  <li><a href="https://github.com/madvirus/ddd-start2" target="_blank">예제 코드</a></li>
</ul>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="books" /><category term="books" /><category term="DDD" /><summary type="html"><![CDATA[도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지 책을 읽고 내용을 아주 간단하게 정리한 글입니다. 책에는 자세한 설명과 예제가 많으니 꼭 구입해서 읽는것을 추천합니다~👍]]></summary></entry><entry><title type="html">MAC 단축키 모음 💻</title><link href="http://localhost:4000/os/mac/hotkey/" rel="alternate" type="text/html" title="MAC 단축키 모음 💻" /><published>2023-01-08T00:00:00+09:00</published><updated>2023-01-08T00:00:00+09:00</updated><id>http://localhost:4000/os/mac/hotkey</id><content type="html" xml:base="http://localhost:4000/os/mac/hotkey/"><![CDATA[<h2 id="-일반-단축키">⌨ 일반 단축키</h2>
<ul>
  <li>화면 잠금: <strong>Control + Command + Q</strong></li>
  <li>복제: <strong>Command + x</strong></li>
  <li>다시찾기: <strong>Command + G</strong></li>
  <li>윈도우 최소화: <strong>Command + M</strong></li>
  <li>프린트: <strong>Command + P</strong></li>
  <li>붙여넣기: <strong>Command + V</strong></li>
  <li>모두선택: <strong>Command + A</strong></li>
  <li>복사: <strong>Command + C</strong></li>
  <li>숨기기: <strong>Command + H</strong></li>
  <li>선택항목 열기: <strong>Command + O</strong></li>
  <li>문서 저장: <strong>Command + S</strong></li>
  <li>이전명령: <strong>Command + Z</strong></li>
  <li>항목찾기: <strong>Command + F</strong></li>
  <li>새 탭 열기: <strong>Command + T</strong></li>
  <li>창 닫기: <strong>Command + W</strong></li>
  <li>강제 종료: <strong>Option + Command + Esc</strong></li>
  <li>Spotlight 표시/숨기기: <strong>Command + Spacebar</strong></li>
  <li>이모티콘 및 기타 기호: <strong>Ctrl + Command + Spacebar</strong></li>
  <li>전체화면: <strong>Ctrl + Command + F</strong></li>
  <li>스크린샷 및 화면 기록: <strong>Shift + Command + 5</strong></li>
  <li>새폴더 생성: <strong>Shift + Command + N</strong></li>
  <li>환경설정 열기: <strong>Command + ,</strong></li>
  <li>최근 사용 앱으로 전환: <strong>Command + Tab</strong></li>
  <li>훑어보기: <strong>Spacebar</strong></li>
</ul>

<h2 id="-finder-및-시스템-단축키">⌨ Finder 및 시스템 단축키</h2>
<ul>
  <li>선택 파일 복제: <strong>Command + D</strong></li>
  <li>Finder 윈도우에서 Spotlight 검색 시작: <strong>Command + F</strong></li>
  <li>선택 디스크 또는 볼륨 추출: <strong>Command + E</strong></li>
  <li>선택 파일의 정보 가져오기: <strong>Command + I</strong></li>
  <li>가상본의 원본 파일이 형성: <strong>Command + R</strong></li>
  <li>컴퓨터 윈도우 열기: <strong>Shift + Command + C</strong></li>
  <li>최근 윈도우/파일 표시: <strong>Shift + Command + F</strong></li>
  <li>현재 macOS 사용자 계정 폴더 열기: <strong>Shift + Command + H</strong></li>
  <li>데스크탑 폴더 열기: <strong>Shift + Command + D</strong></li>
  <li>폴더로 이동 윈도우 열기: <strong>Shift + Command + G</strong></li>
  <li>iCloud Drive 열기: <strong>Shift + Command + I</strong></li>
  <li>네트위크 윈도우 열기: <strong>Shift + Command K</strong></li>
  <li>새 폴더 생성: <strong>Shift + Command + N</strong></li>
  <li>Finder 미리보기 패널 표시/가리기: <strong>Shift + Command + P</strong></li>
  <li>다운로드 폴더 열기: <strong>Shift + Command + L</strong></li>
  <li>문서 폴더 열기: <strong>Shift + Command + O</strong></li>
  <li>AirDrop 윈도우 열기: <strong>Shift + Command + R</strong></li>
</ul>

<h2 id="-참고-사이트">🔎 참고 사이트</h2>
<p><a href="https://www.invaiz.com/blog/?q=YToxOntzOjEyOiJrZXl3b3JkX3R5cGUiO3M6MzoiYWxsIjt9&amp;bmode=view&amp;idx=12577409&amp;t=board" target="_blank">invaiz 블로그</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="os" /><category term="mac" /><category term="mac" /><category term="단축키" /><summary type="html"><![CDATA[⌨ 일반 단축키 화면 잠금: Control + Command + Q 복제: Command + x 다시찾기: Command + G 윈도우 최소화: Command + M 프린트: Command + P 붙여넣기: Command + V 모두선택: Command + A 복사: Command + C 숨기기: Command + H 선택항목 열기: Command + O 문서 저장: Command + S 이전명령: Command + Z 항목찾기: Command + F 새 탭 열기: Command + T 창 닫기: Command + W 강제 종료: Option + Command + Esc Spotlight 표시/숨기기: Command + Spacebar 이모티콘 및 기타 기호: Ctrl + Command + Spacebar 전체화면: Ctrl + Command + F 스크린샷 및 화면 기록: Shift + Command + 5 새폴더 생성: Shift + Command + N 환경설정 열기: Command + , 최근 사용 앱으로 전환: Command + Tab 훑어보기: Spacebar]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 8주차 (안정적인 서비스 만들기)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-8%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 8주차 (안정적인 서비스 만들기)" /><published>2023-01-08T00:00:00+09:00</published><updated>2023-01-08T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-8%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-8%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>안정적인 서비스를 위한 성능개선, 스케일 아웃, 쿼리 최적화 등을 직접 해보는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>HTTP 개선에 따른 차이를 이해하고 Reverse Proxy 성능 개선</li>
  <li>HTTP Cache 전략을 이해하여 적절한 정책을 설정</li>
  <li>쿼리를 최적화하여 조회 성능을 개선</li>
  <li>인덱스를 설정하여 조회 성능을 개선</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>화면 응답 개선을 위한 Nginx 설정, AWS Auto Scaling Group를 이용한 스케일아웃, MySql 쿼리 최적화 및 인덱스 설계 설명</p>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션은 시간 부족으로 7주차 미션과 병행하면 진행하였다 😭</p>

<p>강의를 통해서 배운 Nginx 설정, AWS Auto Scaling Group를 이용한 스케일아웃 등은 직접 하나하나 검색해보면서 적용 해보려면 엄청 힘들고 오래는 작업인데 강의를 통해 바로 배울 수 있어서 좋았고, MySql 쿼리 최적화 및 인덱스 설계는 앞으로 DB조회를 할 때 어떤점을 주의하면서 query를 만들어야 하는지 알 수 있어서 좋았다.</p>

<p>Auto Scaling Group을 설정할 때 인스턴스의 Health Check가 안되서 왜 안되지 하며 몇 시간을 고민했는데 강의 설명에 함정카드가 존재 했었다. 그 이유는 Health Check가 되게 하려면 인스턴스에 퍼블릭 IP를 할당해주어야 하는데 강의 설명에는 그 내용이 없었다. 😱<br />
<strong>아래 설정들은 자신의 상황에 맞게 세팅합니다. 이미지의 정보는 단순 예시입니다.</strong> 라는 강의 설명 문구의 의미를 잘 확인 했어야 했다. 
아마 나같이 무작정 따라하는 교육생들은 꽤나 고생했을거 같다 🤣</p>

<p>MySql 쿼리 최적화 및 인덱스 설계의 경우 어떻게 하면 좀 더 조회가 빨라질까 하면서 ID, 참조 컬럼외의 컬럼에도 인덱싱 해 보았다. 그런데 오히려 조회 속도가 느려지는 경우도 발생하였다.😱  인덱스가 많은 경우 오히려 쿼리 성능이 떨어진다는 것을 확인할 수 있었다.</p>

<p>이번 강의를 통해 느낀 점은 인프라 설정은 정말 많은 부분은 신경써야 하면서 구성하기도 힘들다는 점과 테이블 인덱스 설정같은 경우 특수한 경우가 아니라면 ID, 참조 컬럼에만 인덱싱 하면 좋을거같다는 점이다.</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/infra-subway-performance/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 7주차 (레거시 코드 리팩터링)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-7%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 7주차 (레거시 코드 리팩터링)" /><published>2023-01-08T00:00:00+09:00</published><updated>2023-01-08T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-7%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-7%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>레거시 프로젝트를 리팩터링하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>레거시 프로젝트를 리팩터링하는 경험을 통해 서비스를 안정적으로 운영하면서 레거시 코드를 리팩터링할 수 있는 역량을 키운다.</li>
  <li>프로젝트를 만드는 단계에서 끝나는 것이 아니라 프로젝트를 완료한 후 일정 기간 유지보수를 함으로써 레거시 코드를 리팩터링하는 경험을 쌓는다.</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>도메인 주도 설계 및 아키텍처에 대해 설명합니다.</p>

<p><strong>책 추천</strong></p>
<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810495" target="_blank">도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766367" target="_blank">오브젝트</a></li>
</ul>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>우테캠 Pro 과정의 사실상 최종 보스… 지금까지의 미션들은 사실상 이번 미션을 하기 위한 준비단계라 여겨도 무방하다고 생각된다.</p>

<p>이번 미션은 JDBC 사용과 서비스에서 모든 비즈니스 구현이라는 우리가 흔히 아는 레거시 프로젝트를 지금까지 배운 ATDD, DDD, JPA, 객체지향 생활 체조 원칙, 의존관계 원칙 등을 활용하여 리팩터링하는 미션이었다.</p>

<p>처음 딱 레거시 프로젝트를 열었을 때 나름 정리가 잘 되어있어서 금방 리팩터링 할 수도 있지 않을까…? 란 쓰레기같은 생각도 했었다 😂</p>

<p>1 단계. 테스트를 통한 코드 보호를 위해 우선 기존 레거시 코드의 모든 비지니스 로직에 대해 테스트 코드를 작성하였다. 뭐… 여기까지는 수월했다.</p>

<p>2 단계. 서비스 리팩터링을 시작하고 지옥이 시작되었다…<br />
우선은 도메인 분리를 어떻게 할까 생각을 했다. 처음부터 완벽하게 분리할 수 있으면 좋겠지만 그러기는 힘들었고, 일단 레거시 프로젝트에서 나뉘어져있던 패키지 구조대로 분리하기로 하였다. 프로젝트를 분석했을 때 가장 의존관계가 적은 패키지부터 차근차근 리팩터링을 하기 시작하였다. Entity로 매핑하고, 테스트 코드 작성하고, 비지니스로직을 서비스에서 도메인을 옮기고, 에러 수정하고, 리팩터링하고… 계속 반복하였다.</p>

<p>처음에는 다른 패키지와의 의존관계가 별로 없어서 금방 리팩터링 되었지만 진행 하면 할수록 다른 패키지와의 의존관계가 늘어나고 리팩터링 할 때 마다 에러가 빵빵 터지기 시작하였다. <del>내 멘탈도 같이 터짐…</del></p>

<p>이 때 가장 크게 와 닿았던 점은 테스트 코드의 중요성이었다. 테스트를 통한 코드 보호 덕분에 리팩터링을 할 때 내가 제대로 수정하고 있는지, 기능에 오류가 없는지 바로바로 확인할 수 있었다. 또 리팩터링을 진행하다 보면 이전 메소드의 기능이 무었이었는지 햇갈릴 경우가 있는데 이 때 테스트 코트를 봄으로써 기능들을 파악하기 수월하다는 장점도 있었다.</p>

<p>3 단계. 의존성 리팩터링
의존성 리팩터링을 진행하면서 <a href="https://www.youtube.com/watch?v=dJ5C4qRqAgA" target="_blank">[우아한테크세미나] 우아한객체지향</a> 영상을 출퇴근 시간에 계속 돌려봤다. 객체지향 의존성에 대해 정말 알기 쉽게 설명해 주어서 의존성 리팩터링을 하며 정말 많은 도움이 되었다. 
쉽게 술술 풀리면 좋았겠지만… 의존성 리팩터링을 하며 좀 애매한 부분도 있었다.</p>

<p>예를 들자면 Product, Menu, MenuGroup 같은 경우 각각 생성되는 시기가 다르다. Product, MenuGroup은 독립적으로 생성될 수 있지만 Menu는 생성할 때 Product와 MenuGroup가 필요하다. 조회도 Product, MenuGroup는 독립적이지만 Menu는 Product, MenuGroup가 같이 필요하다. 이럴 때는 Product, Menu, MenuGroup를 한 패키지로 묶는게 맞는가? 떼는게 맞는가?</p>

<p>다른 예로는 OrderTable과 TableGroup과의 관계도 이와 비슷했다. OrderTable은 독립적으로 생성되지만, TableGroup은 생성할 때 OrderTable가 필요하다. 그렇다고 OrderTable이 완전히 독립적이지도 않고 정책상 TableGroup 여부를 확인해야 한다. 이럴 때는 OrderTable, TableGroup를 한 패키지로 묶는게 맞는가? 떼는게 맞는가?</p>

<p>도메인을 분리할 때 트렌젝션 단위로 분리한다고 한다면 전부 떼는게 맞는거 같기도 하면서, 그렇게 되면 너무 세세하게 분리하게 되어 오히려 독이 되는거 같고… 정하기 어려웠다. 😱</p>

<p>나의 경우에는 크게 product, menu, order, table로 패키지를 나누고 아래 그림과 같이 의존 관계를 맺었다.
<img src="/assets/images/posts/jwp_refactoring_step3_의존성.png" alt="jwp_refactoring_step3_의존성" /></p>

<p>4 단계. 멀티 모듈 적용
이번 단계는 Gradle의 멀티 모듈을 이용해 3단계에서 분리했던 패키지들을 모듈로 분리하는 단계였다. 내 생각에는 최종적으로는 모듈 각각이 MSA로 분리되어야 하는데 이를 프로젝트 단위로 분리하는건 미션에서 진행할 수 없으니 Gradle의 멀티 모듈을 이용한게 아닌가 추측해본다. 🤔</p>

<p>이렇게 레거시 코드 리팩터링 미션을 4단계에 걸쳐 진행하였다. 이번 미션을 진행하면서 너무 잠이 부족해 커피를 하루에 3잔씩도 마셨다. 😱 그만큼 난이도도 높았고 시간도 부족한 미션이었다.<br />
그래도 이번 미션을 통해 도메인을 어떻게 설계하면 좋을지, 프로그래밍을 하면서 의존관계를 어떻게 맺어야 하는지에 대해 많이 생각해 볼 수 있어서 좋은 경험이 되었다.
<del>도메인 설계를 해보면서 개인적으로 느낀점으로는 도메인 설계는 타고난 센스가 어느정도 필요한거 같다는 점이다 😂</del></p>

<p>이번 미션에서 나의 문제점은 도메인 설계를 제대로 했는지, 패키지간 의존관계를 제대로 맺었는지 확신이 안선다는 점이다. 뭔가 더 좋은 방법이 분명히 있을거 같은데…😂<br />
다른 문제점으로는 테스트 코드에서의 연관관계 분리를 제대로 하지 못해 모듈 분리할 때 엄청 힘들었다는 점이다.</p>

<p>위 문제점을 개선하기 위해 DDD관련 글을 읽고 공부, 연습을 많이 해봐야 할거같고, 테스트 코드 작성시에도 의존관계를 생각해야할 것 같다(TestFixtures등을 이용)</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/jwp-refactoring/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 6주차 (서비스 진단하기)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-6%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 6주차 (서비스 진단하기)" /><published>2023-01-07T00:00:00+09:00</published><updated>2023-01-07T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-6%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-6%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>웹 성능 테스트, 부하 테스트 및 성능 모니터링을 직접 해보는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>웹 성능테스트</li>
  <li>부하테스트</li>
  <li>모니터링</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>웹 성능테스트, 부하 테스트 및 모니터링의 설명과 함께 PageSpeed, k6, Cloudwatch 등을 이용해 직접 테스트할 수 있도록 설명</p>

<p><strong>부하 테스트</strong><br />
<em>1. 목표 rps 구하기</em></p>
<ul>
  <li>우선 예상 1일 사용자 수(DAU)를 정해봅니다.</li>
  <li>피크 시간대의 집중률을 예상해봅니다. (최대 트개픽 / 평소 트래픽)</li>
  <li>1명당 1일 평균 접속 혹은 요청수를 예상해봅니다.</li>
  <li>이를 바탕으로 Throughput을 계산합니다.
    <ul>
      <li>Throughput : 1일 평균 rps ~ 1일 최대 rps
        <ul>
          <li>1일 사용자 수(DAU) x 1명당 1일 평균 접속 수 = 1일 총 접속 수</li>
          <li>1일 총 접속 수 / 86,400 (초/일) = 1일 평균 rps</li>
          <li>1일 평균 rps x (최대 트래픽 / 평소 트래픽) = 1일 최대 rps</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><em>2. VUser 구하기</em></p>
<ul>
  <li>Request Rate: measured by the number of requests per second (RPS)</li>
  <li>VU: the number of virtual users</li>
  <li>R: the number of requests per VU iteration</li>
  <li>T: a value larger than the time needed to complete a VU iteration
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>T = (R * http_req_duration) (+ 1s)
VUser = (목표 rps * T) / R
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<p><strong>로깅 주의점</strong></p>
<ul>
  <li>Avoid side effects
    <ul>
      <li>logging으로 인해 애플리케이션 기능의 동작에 영향을 미치지 않아야 합니다.</li>
      <li>예를 들어 logging하는 시점에 NullPointerException이 발생해 프로그램이 정상적으로 동작하지 않는 상황이 발생하면 안됩니다.</li>
    </ul>
  </li>
  <li>Be concise and descriptive
    <ul>
      <li>각 Logging에는 데이터와 설명이 모두 포함되어야 합니다.</li>
    </ul>
  </li>
  <li>Log method arguments and return values
    <ul>
      <li>메소드의 input과 output을 로그로 남기면 debugger를 사용해 디버깅하지 않아도 됩니다.</li>
      <li>AOP를 활용할 수 있습니다.</li>
    </ul>
  </li>
  <li>Delete personal information
    <ul>
      <li>로그에 사용자의 전화번호, 계좌번호, 패스워드, 주소, 전화번호와 같은 개인정보를 남기지 않습니다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p><strong>로깅 레벨</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ERROR</code>: 예상하지 못한 심각한 문제가 발생하여 즉시 조사해야 함</li>
  <li><code class="language-plaintext highlighter-rouge">WARN</code>: 로직상 유효성 확인, 예상 가능한 문제로 인한 예외처리 등을 남김, 서비스는 운영될 수 있지만, 주의해야 함</li>
  <li><code class="language-plaintext highlighter-rouge">INFO</code>: 운영에 참고할만한 사항으로, 중요한 비즈니스 프로세스가 완료됨</li>
  <li><code class="language-plaintext highlighter-rouge">DEBUG</code> / <code class="language-plaintext highlighter-rouge">TRACE</code>: 개발 단계에서만 사용하고 운영 단계에서는 사용하지 않음</li>
</ul>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션에서는 새로운 부하테스트 방법과 서버, 애플리케이션 로깅을 해볼 수 있어서 좋았다.</p>

<p>기존에 부하테스트 할 때는 JMeter를 사용했었는데, 이번에 k6라는 것을 처음 알았고 실제로 사용해보니까 JMeter보다 훨씬 사용하기가 편했다.
또 grafana와 연계해서 데이터를 시각화 해보니 JMeter보다 훨씬 이쁘게 나와서 더욱 마음에 들었다. 😁</p>

<p>로깅, 모니터링 같은 경우는 AWS에서 Cloudwatch를 활용해서 어떻게 ec2 access log, metric log를 수집하는지, 대시보드에 어떻게 표현하는지 알 수 있었다.
다만 개인적으로는 Cloudwatch가 좀 덜 이쁘고, 약간 불편하다? 라는 느낌이 있었다. 😅</p>

<p>이번 강의를 통해 k6와 부하테스트의 방법을 배웠으니, 앞으로 API를 개발할 때마다 간단하게 테스트 해보면 좋을것 같다. 👍</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/infra-subway-monitoring/tree/step3" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 5주차 (인수 테스트 기반 TDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 5주차 (인수 테스트 기반 TDD)" /><published>2023-01-05T00:00:00+09:00</published><updated>2023-01-05T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>지하철 노선도 서비스을 구현하면서 인수 테스트 기반 TDD를 진행하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>인수 테스트 기반의 TDD 경험</li>
  <li>로그인 상태 인수 테스트</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>인수 테스트 기반으로 TDD를 진행하는 방법을 설명하고, 단위테스트와 통합테스트 설명, 인수 테스트 기반으로 리팩터링 방법, 인증기반 인수 테스트 방법을 설명</p>

<p><strong>단위 테스트란?</strong></p>
<ul>
  <li>작은 코드 조각(단위)을 검증</li>
  <li>빠르게 수행 가능</li>
  <li>격리된 방식으로 처리</li>
</ul>

<p><strong>통합과 고립(Sociable and Solitary)</strong></p>
<ul>
  <li>단위 테스트 작성 시 관계를 맺고 있는 대상(협력 객체)이 있는 경우를 고려해야 함</li>
  <li>협력 객체를 실제 객체로 사용하는지 Mock(가짜) 객체로 사용하는지에 따라 테스트 구현이 달라짐
<img src="/assets/images/posts/sociable_and_solitary.png" alt="sociable_and_solitary" /></li>
</ul>

<p><strong>Test Double</strong></p>
<ul>
  <li>실제 객체 대신 사용되는 모든 종류의 객체에 대한 일반 용어</li>
  <li>즉, 실제 (예 : 클래스, 모듈 또는 함수)를 가짜 버전으로 대체한다는 의미
<img src="/assets/images/posts/test_double.png" alt="test_double" /></li>
  <li>Dummy: 객체는 전달되지만, 실제로 사용하지 않는다. 종종 파라미터 리스트를 채우기 위해 사용</li>
  <li>Fake: 동작의 구현을 가지고 있지만, 프로덕션에 적합하지 않은 간결한을 제공</li>
  <li>Stub: 테스트 진행 중에 호출에 대한 미리 준비된 응답을 제공하고, 준비된 응답 이외(일반적인 테스트를 위한 프로그래밍 구현)의 항목에는 전혀 응답하지 않는다.</li>
  <li>Spy: 어떻게 호출됐는지에 따라 특정 정보를 표현하는 스파이도 스텁이다.</li>
  <li>Mock: 기대된 호출의 구체적인 형식을 기대하는 미리 프로그래밍된 객체이다.</li>
</ul>

<p><br /></p>

<p><strong>Stub</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">calculates_grades_average_for_student</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">when</span><span class="o">(</span><span class="n">gradebook</span><span class="o">.</span><span class="na">gradesFor</span><span class="o">(</span><span class="n">student</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">grades</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span> <span class="c1">// stubbing</span>

    <span class="kt">double</span> <span class="n">averageGrades</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GradesService</span><span class="o">(</span><span class="n">gradebook</span><span class="o">).</span><span class="na">averageGrades</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>

    <span class="n">assertThat</span><span class="o">(</span><span class="n">averageGrades</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mf">8.0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Mock</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Window</span> <span class="n">windowMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">Window</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Door</span> <span class="n">doorMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">Door</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">enabling_security_locks_windows_and_doors</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SecurityCentral</span> <span class="n">securityCentral</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecurityCentral</span><span class="o">(</span><span class="n">windowMock</span><span class="o">,</span> <span class="n">doorMock</span><span class="o">);</span>

    <span class="n">securityCentral</span><span class="o">.</span><span class="na">securityOn</span><span class="o">();</span>

    <span class="n">verify</span><span class="o">(</span><span class="n">doorMock</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
    <span class="n">verify</span><span class="o">(</span><span class="n">windowMock</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>통합 vs 고립</strong></p>
<ul>
  <li>협력 객체를 실제 객체로? 가짜 객체로?
    <ul>
      <li>실제 객체를 사용하면 협력 객체의 행위를 협력 객체 스스로가 정의</li>
      <li>가짜 객체를 사용하면 협력 객체의 행위를 테스트가 정의</li>
    </ul>
  </li>
  <li>가짜 객체(테스트 더블)를 사용할 경우
    <ul>
      <li>테스트 대상을 검증할 때 외부 요인(협력 객체)으로 부터 철저히 격리</li>
      <li>하지만 테스트가 협력 객체의 상세 구현을 알아야 함</li>
    </ul>
  </li>
  <li>실제 객체를 사용할 경우
    <ul>
      <li>실제 객체를 사용 할 경우 협력 객체의 상세 구현에 대해서 알 필요가 없음</li>
      <li>하지만 협력 객체의 정상 동작 여부에 영향을 받음</li>
    </ul>
  </li>
  <li>테스트 코드를 작성할 때
    <ul>
      <li>가짜 객체를 활용하면 실제 객체를 사용할 때 보다 조금 더 편하게 테스트를 작성할 수 있음</li>
      <li>하지만 상세 구현에 의존하는 테스트가 될 수 있음</li>
    </ul>
  </li>
  <li>추천하는 방법
    <ul>
      <li>TDD를 연습할 때는 가급적이면 실제 객체를 활용하는 것을 우선으로 진행</li>
      <li>테스트 작성이 어렵거나 흐름이 잘 이어지지 않는다면 테스트 더블을 활용하는 방법으로 접근하시는 것을 추천</li>
    </ul>
  </li>
</ul>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>미션이 진행될수록 점점 어려워졌고, 시간이 부족해지기 시작했다. 평소에 잘 마시지 않던 커피를 미션을 진행하는 동안 매일 마시게 되었다.</p>

<p>이번 미션은 리팩터링, 경로 조회 기능, 인증을 통한 기능, 요금 조회 등을 구현하면서 인수 테스트와 TDD를 심화하는 과정이었다.</p>

<p>이번 미션 같은 경우 인수 테스트 만들고, 도메인 단위 테스트를 하고, 서비스 통합 테스트를 하는 식으로 Outside In과 Inside Out 방식의 테스트를 섞어가면서 진행하였다. 이렇게 진행을 하니 요구사항과 기능 이해에 도움이 되었고, 복잡한 설계를 한번에 만들려고 하지않고 쪼개서 생각하게 되어 기능 구현에 도움이 되었다.</p>

<p>하지만 처음부터 완벽할 수는 없었고 메서드명, 빌더패턴 적용, Optional 활용, 인터페이스 활용 등 피드백 받은 것들이 많았다. 기능 구현하랴 피드백 반영하랴… 정말 시간이 너무 부족했다. 😭</p>

<p>이번 미션을 하면서 인수 테스트, 단위 테스트, 통합 테스트에 좀 더 익숙해질 수 있었고, 프로그래밍에 대한 피드백으로 실력 향상에 도움이 되었다.</p>

<p>뒤로 갈수록 미션 난이도가 높아지면서, 미션 한 단계 한 단계 Merge 될 때마다 정말 감격(?)스러웠다… 😭</p>

<p>이번 미션에서의 나의 문제점은 피드백의 내용에서 알 수 있듯이 프로그래밍 실력 부족이었다… 😭<br />
책만 쌓여간다… 📖📖📖</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/atdd-subway-service/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 3주차 (인수 테스트 주도 개발 - ATDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 3주차 (인수 테스트 주도 개발 - ATDD)" /><published>2023-01-04T00:00:00+09:00</published><updated>2023-01-04T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>인수 테스트 만들기 경험을 위해 지하철 노선도 관리 어드민 서비스 구현을 제공된 인수 조건 기반으로, 인수 테스트 주도 개발을 진행하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>웹 애플리케이션을 인수 테스트 주도 개발 방법으로 개발하는 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>ATDD가 무엇인지 설명하고, 인수 테스트를 진행하는 방법, 인수 테스트에 사용되는 도구를 설명</p>

<p><strong>ATDD란?</strong><br />
인수 테스트 + TDD<br />
<img src="/assets/images/posts/atdd.png" alt="atdd" /></p>

<p><strong>인수 테스트란(Acceptance Test)?</strong></p>
<ul>
  <li>사용자 스토리를 검증하는 기능 테스트</li>
  <li>사용자 스토리로 테스트할 시나리오를 작성</li>
  <li>명세나 계약의 요구 사항이 충족되는지 확인하기 위해 수행되는 테스트</li>
</ul>

<p><strong>테스트의 종류</strong></p>
<ul>
  <li>단위 테스트</li>
  <li>통합 테스트</li>
  <li>E2E 테스트</li>
</ul>

<p><strong>테스트가 검증하는 대상</strong></p>
<ul>
  <li>단위 테스트: 구현한 부분, 단위를 검증</li>
  <li>통합 테스트: 각 단위들이 유기적으로 잘 동작하는지 검증</li>
  <li>인수 테스트: 요구사항을 만족하는지를 검증</li>
</ul>

<p>인수 테스트는 E2E에 해당</p>

<p><strong>webEnvironment</strong><br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment</code> 속성을 사용하여 테스트 서버의 실행 방법을 설정</p>
<ul>
  <li>MOCK: Mocking된 웹 환경을 제공, MockMvc를 사용한 테스트를 진행할 수 있음</li>
  <li>RANDOM_PORT: 실제 웹 환경을 구성</li>
  <li>DEFINED_PORT: 실제 웹 환경을 구성, 지정한 포트를 listen</li>
  <li>NONE: 아무런 웹 환경을 구성하지 않음</li>
</ul>

<p><strong>MockMvc vs WebTestClient vs RestAssured</strong></p>
<ul>
  <li>MockMvc<br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment.MOCK</code>과 함께 사용 가능하며 <code class="language-plaintext highlighter-rouge">mocking</code> 된 <code class="language-plaintext highlighter-rouge">web environment</code> 환경에서 테스트</li>
  <li>WebTestClient<br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment.RANDOM_PORT</code> 나 <code class="language-plaintext highlighter-rouge">DEFINED_PORT</code>와 함께 사용, <code class="language-plaintext highlighter-rouge">Netty</code>를 기본으로 사용</li>
  <li>RestAssured<br />
실제 <code class="language-plaintext highlighter-rouge">web environment(Apache Tomcat)</code>을 사용하여 테스트</li>
</ul>

<p><strong>JsonPath</strong></p>
<ul>
  <li>Json 문서를 읽어오는 DSL</li>
  <li>JsonPath를 사용하면 Response Dto 객체로 받을 필요 없이 필요한 값만 추출하여 검증에 사용할 수 있음</li>
</ul>

<p><strong>인수 테스트 예시</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
* Given 지하철 노선을 생성하고
* When 생성한 지하철 노선을 조회하면
* Then 생성한 지하철 노선의 정보를 응답받을 수 있다.
*/</span>
<span class="nd">@Test</span>
<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"지하철 노선 조회"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">retrieveLine</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// given</span>
    <span class="n">지하철역들_생성</span><span class="o">(</span><span class="s">"잠실역"</span><span class="o">,</span> <span class="s">"문정역"</span><span class="o">);</span>
    <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">지하철노선_생성</span><span class="o">(</span><span class="s">"8호선"</span><span class="o">,</span> <span class="s">"분홍색"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">10</span><span class="o">).</span><span class="na">jsonPath</span><span class="o">().</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>

    <span class="c1">// when</span>
    <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">지하철노선_조회</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>

    <span class="c1">// then</span>
    <span class="nc">JsonPath</span> <span class="n">jsonPath</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">jsonPath</span><span class="o">();</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">statusCode</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">지하철노선_생성</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">color</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">upStationId</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">downStationId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"color"</span><span class="o">,</span> <span class="n">color</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"upStationId"</span><span class="o">,</span> <span class="n">upStationId</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"downStationId"</span><span class="o">,</span> <span class="n">downStationId</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"distance"</span><span class="o">,</span> <span class="n">distance</span><span class="o">);</span>

    <span class="k">return</span> <span class="nc">RestAssured</span><span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">params</span><span class="o">)</span>
            <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
            <span class="o">.</span><span class="na">when</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="s">"/lines"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">지하철노선_조회</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">RestAssured</span>
            <span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">when</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">"/lines/{id}"</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
            <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션에서 인수 테스트라는 것을 처음 접하였다. 처음 설명을 들었을때 개념 잡기가 약간은 어려웠지만 실제 예제 코드를 보고 미션을 진행해보니, TDD를 처음 접했을 때보다 훨씬 수월하게 할 수 있었다. 아마 인수 테스트의 목적자체가 사용자의 스토리를 검증하는 테스트라서 직관적으로 구상하기 좋아서 그런것 같다.</p>

<p>그와는 별개로 이번 미션이 1주차, 2주차 대비 확실히 어려웠다.</p>

<p><strong>1단계 인수테스트 작성</strong>, <strong>2단계 지하철 노선 기능</strong> 구현은 단순 CURD로 크게 어렵지 않게 구현할 수 있었지만 <strong>3단계 구간 추가기능</strong>, <strong>4단계 구간 제거 기능</strong>은 정책이 많아 여러가지 생각할 것들이 많았다.<br />
미션을 진행하면서 부족한 JPA 지식에 대해서는 <strong>자바 ORM 표준 JPA 프로그래밍</strong> 책을 살펴보며 미션을 진행하였고, 리뷰어님의 피드백도 많은 도움이 되었다.</p>

<p>단위 테스트에 더하여 인수 테스트를 기반으로 개발, 리팩터링을 진행해보니 단위 테스트만으로 기능 개발했을 때보다 비즈니스 로직을 이해하는데 많은 도움이 되었고, 프로그래밍 하기도 훨씬 수월하였다.</p>

<p>이번 미션에서 나의 문제점은 여전히 서비스에서 기능을 구현하던 버릇이 있어서 그런지, 도메인에 기능을 구현하려다 보니 어떻게 해야할지 생각이 안나 막히는 부분이 있었고, 메소드명으로 로직의 동작의미를 명확히 하는 부분이 부족하였다.</p>

<p>이를 개선하기 위해서 객체 지향 설계에 대해 더 공부, 연습을 하고 메소드, 변수의 의미를 바로알 수 있도록 축약하지 않고 자세히 설명하는 이름을 짓는 노력을 해야할 것 같다. 😅😂</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/atdd-subway-admin/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 4주차 (그럴듯한 서비스 만들기)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 4주차 (그럴듯한 서비스 만들기)" /><published>2023-01-04T00:00:00+09:00</published><updated>2023-01-04T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>AWS에서 네트워크를 구성해보고 서비스를 배포하며 네트워크에 대한 기본적인 개념을 학습해보는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>AWS 상에서 네트워크를 구성하며, 네트워크 기본 개념들을 학습</li>
  <li>도커 컨테이너를 학습</li>
  <li>개발 환경을 구성해보고 지속적 통합을 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>AWS 네트워크 구성, 네트워크 통신 설명, 도커 컨테이너 설명과 함께 직접 AWS에서 네트워크 망을 구성하고, 서비스를 배포할 수 있도록 가이드</p>

<p><strong>Cloud?</strong><br />
인터넷을 통해 원격으로 접근할 수 있는 모든 것을 의미합니다.</p>

<p><strong>Cloud Computing?</strong><br />
서버, 데이터베이스, 네트워킹 등 컴퓨팅 리소스를
인터넷을 통해 관리하는 것을 의미합니다</p>

<p><strong>Cloud를 사용하는 이유</strong><br />
클라우드를 사용한다는 것은 단순히 컴퓨팅 리소스를 인터넷을 통해 관리하는 것만을 의미하지 않습니다. <strong>관심사를 분리하여 우리가 집중할 대상에 보다 집중하기 위함</strong>입니다.</p>

<p><strong>AWS 네트워크 구성</strong>
<img src="/assets/images/posts/aws_network.png" alt="aws_network" /></p>

<p><strong>OSI 7 Layer</strong></p>

<p><img src="/assets/images/posts/osi_7.jpeg" alt="osi_7" />
<img src="/assets/images/posts/osi_7_description.png" alt="osi_7_description" /></p>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션에서는 네트워크의 대략적인 윤곽을 잡을 수 있다는 점과, 비용의 부담때문에 도전해보기 어려운 AWS를 경험할 수 있다는 점이 좋았다.</p>

<p>도커 컨테이너와 쉘 스크립트 작성의 경우 기존에 사용해본 경험이 있어서 이번 미션에서 사용하는 것에 크게 어려움은 없었지만, 네트워크 개념과 AWS 구성하는 것에서 쪼금 애를 먹었다. 하지만 네트워크 구성에 필요한 부분을 하나부터 열까지 실행 커맨드와 함께 그림으로 설명해 주셔서 나름 수월하게 미션을 진행할 수 있었다. <del>만약 도커, 쉘 스크립트를 처음 접했다면 아마 애로사항이 많았을거 같다.😂</del></p>

<p>이번 강의를 통해 네트워크 전반적인 내용을 알았다고는 절대 말할 수 없다. 단지 대략적인 윤곽만 잡았을 뿐이다.</p>

<p>네트워크는 파면 팔수록 알아야 하는 내용이 많기 때문에 반드시 따로 공부를 해봐야 할 것 같다. 📖🔎</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/infra-subway-deploy/tree/step3" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 1주차 (로또 TDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 1주차 (로또 TDD)" /><published>2023-01-03T00:00:00+09:00</published><updated>2023-01-03T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>로또 구입 금액을 입력하면, 구입 금액에 해당하는 로또를 발급하는 애플리케이션을 만드는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li><strong>TDD 기반으로 프로그래밍하는 경험</strong></li>
  <li>메소드 분리 + 클래스를 분리하는 리팩토링 경험</li>
  <li>점진적으로 리팩토링하는 경험</li>
  <li>객체지향 생활 체조 원칙 경험</li>
  <li>Clean Code 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>강의 내용은 TDD란 무엇이고, 하는 이유, TDD로 프로그래밍 하는 방법, TDD 원칙을 설명합니다.</p>

<p><strong>TDD란?</strong></p>
<ul>
  <li>TDD = TFD(Test First Development) + 리팩토링</li>
  <li>TDD란 프로그래밍 의사결정과 피드백 사이의 간극을 의식하고 이를 제어하는 기술이다.</li>
  <li>TDD의 아이러니 중 하나는 테스트 기술이 아니라는 점이다. TDD는 분석 기술이며, 설계 기술이기도 하다.</li>
</ul>

<p><strong>TDD를 하는 이유</strong></p>
<ul>
  <li>디버깅 시간을 줄여준다.</li>
  <li>동작하는 문서 역할을 한다.</li>
  <li>변화에 대한 두려움을 줄여준다.</li>
</ul>

<p><strong>TDD 사이클</strong>
<img src="/assets/images/posts/tdd_cycle.png" alt="tdd_cycle" /></p>
<ul>
  <li>실패하는 테스트를 구현한다.</li>
  <li>테스트가 성공하도록 프로덕션 코드를 구현한다.</li>
  <li>프로덕션 코드와 테스트코드를 리팩토링한다.</li>
</ul>

<p><strong>TDD 원칙</strong></p>
<ul>
  <li>실패하는 단위 테스트를 작성할 때까지 프로덕션 코드(production code)를 작성하지 않는다.</li>
  <li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>
  <li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>
</ul>

<p><strong>TDD가 막막할 때 팁</strong></p>
<ol>
  <li>우선 <strong>구현할 기능 목록을 작성</strong>한 후에 TDD로 도전.</li>
  <li>그래도 막막하다면 <strong>지금까지 익숙한 방식으로 일단 구현</strong></li>
  <li>구현하려는 프로그래밍의 <strong>도메인 지식을 쌓는다.</strong></li>
  <li><strong>구현한 모든 코드를 버린다.</strong></li>
  <li>구현할 기능 목록 작성 또는 간단한 도메인 설계</li>
  <li>기능 목록 중 가장 만만한 녀석부터 TDD로 구현 시작</li>
  <li>복잡도가 높아져 리팩토링하기 힘든 상태가 되면 다시 버린다.</li>
  <li>다시 도전</li>
</ol>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>기존에 TDD가 무엇인지는 알고 있었지만 실제로 써본 것은 처음이여서 어떻게 시작해야 할 지 막막하였다. 그래서 일단 키보드에서 손을 떼고 로또 애플리케이션을 만들기 위해서 어떤 도메인이 필요한지부터 생각하였다.</p>

<p>물론 TDD만 처음 접한 것 뿐만 아니라 도메인 설계 지식도 부족하여 이 또한 막막하였다.</p>

<p>도메인을 설계를 어떻게 해야 하나 고민하며 내가 내린 결론은, 실 생활에서 로또를 구매한다면 어떤 주체들이 필요한지를 떠올리는 것이었다. 실 생활에 대입해 보니 어느정도 도메인 윤곽이 잡혔고, 구현 기능 목록을 작성을 시작으로 TDD 사이클을 지키도록 노력하며 애플리케이션 개발을 하였다.</p>

<p>TDD를 진행하며 처음 테스트코드를 작성할 때 어떤 기능부터 작성해야 하는지 잘 몰라서 답답했는데, 포비님의 가르침 대로 일단 생성을 테스트하는 것부터 만들며 시작하였다. 그렇게 물꼬를 트면서 시작하니까 조금은 수월하게 테스트코드를 작성할 수 있었다.</p>

<p>TDD를 진행하면서 처음에는 어색했지만 조금씩 익숙해 졌고, 그 다음에는 객체지향 생활 체조 원칙을 지키며 프로그래밍 하려고 노력하며 프로그래밍을 하였고 미션을 잘 마무리할 수 있었다.</p>

<p>로또 미션을 하며 나의 문제점은 테스트코드를 작성할 때 설명의 가독성이 떨어진다는 것이었다.<em>(예: 로또 구매 가능 갯수 계산 -&gt; 5000원으로 구매 가능한 로또의 개수를 계산하면 5개 이다.)</em> 이를 개선하기 위해서 피드백 받은것 처럼 파라미터와 리턴값도 정확히 테스트코드 설명에 추가 하는식으로 작성하면 좋을 것 같다. <del>독서를 통해 글을 잘 쓰는 능력을 키우는 것도…</del></p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/java-lotto-pro/tree/step5" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry></feed>