<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-05T23:59:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stack O Flow</title><subtitle>조금씩 알아가는 것을 적는 개발 노트입니다.</subtitle><author><name>Sangjae Oh</name></author><entry><title type="html">우아한테크캠프 Pro 5기 - 5주차 (인수 테스트 기반 TDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 5주차 (인수 테스트 기반 TDD)" /><published>2023-01-05T00:00:00+09:00</published><updated>2023-01-05T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-5%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>지하철 노선도 서비스을 구현하면서 인수 테스트 기반 TDD를 진행하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>인수 테스트 기반의 TDD 경험</li>
  <li>로그인 상태 인수 테스트</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>인수 테스트 기반으로 TDD를 진행하는 방법을 설명하고, 단위테스트와 통합테스트 설명, 인수 테스트 기반으로 리팩터링 방법, 인증기반 인수 테스트 방법을 설명</p>

<p><strong>단위 테스트란?</strong></p>
<ul>
  <li>작은 코드 조각(단위)을 검증</li>
  <li>빠르게 수행 가능</li>
  <li>격리된 방식으로 처리</li>
</ul>

<p><strong>통합과 고립(Sociable and Solitary)</strong></p>
<ul>
  <li>단위 테스트 작성 시 관계를 맺고 있는 대상(협력 객체)이 있는 경우를 고려해야 함</li>
  <li>협력 객체를 실제 객체로 사용하는지 Mock(가짜) 객체로 사용하는지에 따라 테스트 구현이 달라짐
<img src="/assets/images/posts/sociable_and_solitary.png" alt="sociable_and_solitary" /></li>
</ul>

<p><strong>Test Double</strong></p>
<ul>
  <li>실제 객체 대신 사용되는 모든 종류의 객체에 대한 일반 용어</li>
  <li>즉, 실제 (예 : 클래스, 모듈 또는 함수)를 가짜 버전으로 대체한다는 의미
<img src="/assets/images/posts/test_double.png" alt="test_double" /></li>
  <li>Dummy: 객체는 전달되지만, 실제로 사용하지 않는다. 종종 파라미터 리스트를 채우기 위해 사용</li>
  <li>Fake: 동작의 구현을 가지고 있지만, 프로덕션에 적합하지 않은 간결한을 제공</li>
  <li>Stub: 테스트 진행 중에 호출에 대한 미리 준비된 응답을 제공하고, 준비된 응답 이외(일반적인 테스트를 위한 프로그래밍 구현)의 항목에는 전혀 응답하지 않는다.</li>
  <li>Spy: 어떻게 호출됐는지에 따라 특정 정보를 표현하는 스파이도 스텁이다.</li>
  <li>Mock: 기대된 호출의 구체적인 형식을 기대하는 미리 프로그래밍된 객체이다.</li>
</ul>

<p><br /></p>

<p><strong>Stub</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">calculates_grades_average_for_student</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">when</span><span class="o">(</span><span class="n">gradebook</span><span class="o">.</span><span class="na">gradesFor</span><span class="o">(</span><span class="n">student</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">grades</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span> <span class="c1">// stubbing</span>

    <span class="kt">double</span> <span class="n">averageGrades</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GradesService</span><span class="o">(</span><span class="n">gradebook</span><span class="o">).</span><span class="na">averageGrades</span><span class="o">(</span><span class="n">student</span><span class="o">);</span>

    <span class="n">assertThat</span><span class="o">(</span><span class="n">averageGrades</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mf">8.0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Mock</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Window</span> <span class="n">windowMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">Window</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Door</span> <span class="n">doorMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">Door</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">enabling_security_locks_windows_and_doors</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SecurityCentral</span> <span class="n">securityCentral</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecurityCentral</span><span class="o">(</span><span class="n">windowMock</span><span class="o">,</span> <span class="n">doorMock</span><span class="o">);</span>

    <span class="n">securityCentral</span><span class="o">.</span><span class="na">securityOn</span><span class="o">();</span>

    <span class="n">verify</span><span class="o">(</span><span class="n">doorMock</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
    <span class="n">verify</span><span class="o">(</span><span class="n">windowMock</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>통합 vs 고립</strong></p>
<ul>
  <li>협력 객체를 실제 객체로? 가짜 객체로?
    <ul>
      <li>실제 객체를 사용하면 협력 객체의 행위를 협력 객체 스스로가 정의</li>
      <li>가짜 객체를 사용하면 협력 객체의 행위를 테스트가 정의</li>
    </ul>
  </li>
  <li>가짜 객체(테스트 더블)를 사용할 경우
    <ul>
      <li>테스트 대상을 검증할 때 외부 요인(협력 객체)으로 부터 철저히 격리</li>
      <li>하지만 테스트가 협력 객체의 상세 구현을 알아야 함</li>
    </ul>
  </li>
  <li>실제 객체를 사용할 경우
    <ul>
      <li>실제 객체를 사용 할 경우 협력 객체의 상세 구현에 대해서 알 필요가 없음</li>
      <li>하지만 협력 객체의 정상 동작 여부에 영향을 받음</li>
    </ul>
  </li>
  <li>테스트 코드를 작성할 때
    <ul>
      <li>가짜 객체를 활용하면 실제 객체를 사용할 때 보다 조금 더 편하게 테스트를 작성할 수 있음</li>
      <li>하지만 상세 구현에 의존하는 테스트가 될 수 있음</li>
    </ul>
  </li>
  <li>추천하는 방법
    <ul>
      <li>TDD를 연습할 때는 가급적이면 실제 객체를 활용하는 것을 우선으로 진행</li>
      <li>테스트 작성이 어렵거나 흐름이 잘 이어지지 않는다면 테스트 더블을 활용하는 방법으로 접근하시는 것을 추천</li>
    </ul>
  </li>
</ul>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>미션이 진행될수록 점점 어려워졌고, 시간이 부족해지기 시작했다. 평소에 잘 마시지 않던 커피를 미션을 진행하는 동안 매일 마시게 되었다.</p>

<p>이번 미션은 리팩터링, 경로 조회 기능, 인증을 통한 기능, 요금 조회 등을 구현하면서 인수 테스트와 TDD를 심화하는 과정이었다.</p>

<p>이번 미션 같은 경우 인수 테스트 만들고, 도메인 단위 테스트를 하고, 서비스 통합 테스트를 하는 식으로 Outside In과 Inside Out 방식의 테스트를 섞어가면서 진행하였다. 이렇게 진행을 하니 요구사항과 기능 이해에 도움이 되었고, 복잡한 설계를 한번에 만들려고 하지않고 쪼개서 생각하게 되어 기능 구현에 도움이 되었다.</p>

<p>하지만 처음부터 완벽할 수는 없었고 메서드명, 빌더패턴 적용, Optional 활용, 인터페이스 활용 등 피드백 받은 것들이 많았다. 기능 구현하랴 피드백 반영하랴… 정말 시간이 너무 부족했다. 😭</p>

<p>이번 미션을 하면서 인수 테스트, 단위 테스트, 통합 테스트에 좀더 익숙해질 수 있었고, 프로그래밍에 대한 피드백으로 실력 향상에 도움이 되었다.</p>

<p>뒤로 갈수록 미션 난이도가 높아지면서, 미션 한단계 한단계 Merge 될 때마다 정말 감격(?)스러웠다. 😭</p>

<p>이번 미션에서의 나의 문제점은 피드백의 내용에서 알 수 있듯이 프로그래밍 실력 부족이었다… 😭
책만 쌓여간다… 📖📖📖</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/atdd-subway-service/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 4주차 (그럴듯한 서비스 만들기)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 4주차 (그럴듯한 서비스 만들기)" /><published>2023-01-04T00:00:00+09:00</published><updated>2023-01-04T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-4%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>AWS에서 네트워크를 구성해보고 서비스를 배포하며 네트워크에 대한 기본적인 개념을 학습해보는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>AWS 상에서 네트워크를 구성하며, 네트워크 기본 개념들을 학습</li>
  <li>도커 컨테이너를 학습</li>
  <li>개발 환경을 구성해보고 지속적 통합을 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>AWS 네트워크 구성, 네트워크 통신 설명, 도커 컨테이너 설명과 함께 직접 AWS에서 네트워크 망을 구성하고, 서비스를 배포할 수 있도록 가이드</p>

<p><strong>Cloud?</strong><br />
인터넷을 통해 원격으로 접근할 수 있는 모든 것을 의미합니다.</p>

<p><strong>Cloud Computing?</strong><br />
서버, 데이터베이스, 네트워킹 등 컴퓨팅 리소스를
인터넷을 통해 관리하는 것을 의미합니다</p>

<p><strong>Cloud를 사용하는 이유</strong><br />
클라우드를 사용한다는 것은 단순히 컴퓨팅 리소스를 인터넷을 통해 관리하는 것만을 의미하지 않습니다. <strong>관심사를 분리하여 우리가 집중할 대상에 보다 집중하기 위함</strong>입니다.</p>

<p><strong>AWS 네트워크 구성</strong>
<img src="/assets/images/posts/aws_network.png" alt="aws_network" /></p>

<p><strong>OSI 7 Layer</strong></p>

<p><img src="/assets/images/posts/osi_7.jpeg" alt="osi_7" />
<img src="/assets/images/posts/osi_7_description.png" alt="osi_7_description" /></p>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션에서는 네트워크의 대략적인 윤곽을 잡을 수 있다는 점과, 비용의 부담때문에 도전해보기 어려운 AWS를 경험할 수 있다는 점이 좋았다.</p>

<p>도커 컨테이너와 쉘 스크립트 작성의 경우 기존에 사용해본 경험이 있어서 이번 미션에서 사용하는 것에 크게 어려움은 없었지만, 네트워크 개념과 AWS 구성하는 것에서 쪼금 애를 먹었다. 하지만 네트워크 구성에 필요한 부분을 하나부터 열까지 실행 커맨드와 함께 그림으로 설명해 주셔서 나름 수월하게 미션을 진행할 수 있었다. <del>만약 도커, 쉘 스크립트를 처음 접했다면 아마 애로사항이 많았을거 같다.😂</del></p>

<p>이번 강의를 통해 네트워크 전반적인 내용을 알았다고는 절대 말할 수 없다. 단지 대략적인 윤곽만 잡았을 뿐이다.</p>

<p>네트워크는 파면 팔수록 알아야 하는 내용이 많기 때문에 반드시 따로 공부를 해봐야 할 것 같다. 📖🔎</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/infra-subway-deploy/tree/step3" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 3주차 (인수 테스트 주도 개발 - ATDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 3주차 (인수 테스트 주도 개발 - ATDD)" /><published>2023-01-04T00:00:00+09:00</published><updated>2023-01-04T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-3%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>인수 테스트 만들기 경험을 위해 지하철 노선도 관리 어드민 서비스 구현을 제공된 인수 조건 기반으로, 인수 테스트 주도 개발을 진행하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>웹 애플리케이션을 인수 테스트 주도 개발 방법으로 개발하는 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>ATDD가 무엇인지 설명하고, 인수 테스트를 진행하는 방법, 인수 테스트에 사용되는 도구를 설명</p>

<p><strong>ATDD란?</strong><br />
인수 테스트 + TDD<br />
<img src="/assets/images/posts/atdd.png" alt="atdd" /></p>

<p><strong>인수 테스트란(Acceptance Test)?</strong></p>
<ul>
  <li>사용자 스토리를 검증하는 기능 테스트</li>
  <li>사용자 스토리로 테스트할 시나리오를 작성</li>
  <li>명세나 계약의 요구 사항이 충족되는지 확인하기 위해 수행되는 테스트</li>
</ul>

<p><strong>테스트의 종류</strong></p>
<ul>
  <li>단위 테스트</li>
  <li>통합 테스트</li>
  <li>E2E 테스트</li>
</ul>

<p><strong>테스트가 검증하는 대상</strong></p>
<ul>
  <li>단위 테스트: 구현한 부분, 단위를 검증</li>
  <li>통합 테스트: 각 단위들이 유기적으로 잘 동작하는지 검증</li>
  <li>인수 테스트: 요구사항을 만족하는지를 검증</li>
</ul>

<p>인수 테스트는 E2E에 해당</p>

<p><strong>webEnvironment</strong><br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment</code> 속성을 사용하여 테스트 서버의 실행 방법을 설정</p>
<ul>
  <li>MOCK: Mocking된 웹 환경을 제공, MockMvc를 사용한 테스트를 진행할 수 있음</li>
  <li>RANDOM_PORT: 실제 웹 환경을 구성</li>
  <li>DEFINED_PORT: 실제 웹 환경을 구성, 지정한 포트를 listen</li>
  <li>NONE: 아무런 웹 환경을 구성하지 않음</li>
</ul>

<p><strong>MockMvc vs WebTestClient vs RestAssured</strong></p>
<ul>
  <li>MockMvc<br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment.MOCK</code>과 함께 사용 가능하며 <code class="language-plaintext highlighter-rouge">mocking</code> 된 <code class="language-plaintext highlighter-rouge">web environment</code> 환경에서 테스트</li>
  <li>WebTestClient<br />
<code class="language-plaintext highlighter-rouge">@SpringBootTest</code>의 <code class="language-plaintext highlighter-rouge">webEnvironment.RANDOM_PORT</code> 나 <code class="language-plaintext highlighter-rouge">DEFINED_PORT</code>와 함께 사용, <code class="language-plaintext highlighter-rouge">Netty</code>를 기본으로 사용</li>
  <li>RestAssured<br />
실제 <code class="language-plaintext highlighter-rouge">web environment(Apache Tomcat)</code>을 사용하여 테스트</li>
</ul>

<p><strong>JsonPath</strong></p>
<ul>
  <li>Json 문서를 읽어오는 DSL</li>
  <li>JsonPath를 사용하면 Response Dto 객체로 받을 필요 없이 필요한 값만 추출하여 검증에 사용할 수 있음</li>
</ul>

<p><strong>인수 테스트 예시</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
* Given 지하철 노선을 생성하고
* When 생성한 지하철 노선을 조회하면
* Then 생성한 지하철 노선의 정보를 응답받을 수 있다.
*/</span>
<span class="nd">@Test</span>
<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"지하철 노선 조회"</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">retrieveLine</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// given</span>
    <span class="n">지하철역들_생성</span><span class="o">(</span><span class="s">"잠실역"</span><span class="o">,</span> <span class="s">"문정역"</span><span class="o">);</span>
    <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">지하철노선_생성</span><span class="o">(</span><span class="s">"8호선"</span><span class="o">,</span> <span class="s">"분홍색"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">,</span> <span class="mi">2L</span><span class="o">,</span> <span class="mi">10</span><span class="o">).</span><span class="na">jsonPath</span><span class="o">().</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>

    <span class="c1">// when</span>
    <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">지하철노선_조회</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>

    <span class="c1">// then</span>
    <span class="nc">JsonPath</span> <span class="n">jsonPath</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">jsonPath</span><span class="o">();</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">statusCode</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">지하철노선_생성</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">color</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">upStationId</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">downStationId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"color"</span><span class="o">,</span> <span class="n">color</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"upStationId"</span><span class="o">,</span> <span class="n">upStationId</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"downStationId"</span><span class="o">,</span> <span class="n">downStationId</span><span class="o">);</span>
    <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"distance"</span><span class="o">,</span> <span class="n">distance</span><span class="o">);</span>

    <span class="k">return</span> <span class="nc">RestAssured</span><span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">params</span><span class="o">)</span>
            <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
            <span class="o">.</span><span class="na">when</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="s">"/lines"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExtractableResponse</span><span class="o">&lt;</span><span class="nc">Response</span><span class="o">&gt;</span> <span class="n">지하철노선_조회</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">RestAssured</span>
            <span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">when</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">"/lines/{id}"</span><span class="o">,</span> <span class="n">id</span><span class="o">)</span>
            <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
            <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>이번 미션에서 인수 테스트라는 것을 처음 접하였다. 처음 설명을 들었을때 개념 잡기가 약간은 어려웠지만 실제 예제 코드를 보고 미션을 진행해보니, TDD를 처음 접했을 때보다 훨씬 수월하게 할 수 있었다. 아마 인수 테스트의 목적자체가 사용자의 스토리를 검증하는 테스트라서 직관적으로 구상하기 좋아서 그런것 같다.</p>

<p>그와는 별개로 이번 미션이 1주차, 2주차 대비 확실히 어려웠다.</p>

<p><strong>1단계 인수테스트 작성</strong>, <strong>2단계 지하철 노선 기능</strong> 구현은 단순 CURD로 크게 어렵지 않게 구현할 수 있었지만 <strong>3단계 구간 추가기능</strong>, <strong>4단계 구간 제거 기능</strong>은 정책이 많아 여러가지 생각할 것들이 많았다.<br />
미션을 진행하면서 부족한 JPA 지식에 대해서는 <strong>자바 ORM 표준 JPA 프로그래밍</strong> 책을 살펴보며 미션을 진행하였고, 리뷰어님의 피드백도 많은 도움이 되었다.</p>

<p>단위 테스트에 더하여 인수 테스트를 기반으로 개발, 리팩터링을 진행해보니 단위 테스트만으로 기능 개발했을 때보다 비즈니스 로직을 이해하는데 많은 도움이 되었고, 프로그래밍 하기도 훨씬 수월하였다.</p>

<p>이번 미션에서 나의 문제점은 여전히 서비스에서 기능을 구현하던 버릇이 있어서 그런지, 도메인에 기능을 구현하려다 보니 어떻게 해야할지 생각이 안나 막히는 부분이 있었고, 메소드명으로 로직의 동작의미를 명확히 하는 부분이 부족하였다.</p>

<p>이를 개선하기 위해서 객체 지향 설계에 대해 더 공부, 연습을 하고 메소드, 변수의 의미를 바로알 수 있도록 축약하지 않고 자세히 설명하는 이름을 짓는 노력을 해야할 것 같다. 😅😂</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/atdd-subway-admin/tree/step4" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 2주차 (JPA)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-2%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 2주차 (JPA)" /><published>2023-01-03T00:00:00+09:00</published><updated>2023-01-03T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-2%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-2%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>QnA 저장소를 기반으로 JPA를 사용하여 엔티티 매핑, 연관 관계 매핑, 서비스 레이어 리팩터링을 진행하는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li>JPA 학습 테스트를 통한 <strong>JPA 학습</strong></li>
  <li>Q&amp;A 서비스를 JPA로 매핑</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>JPA에 대해 전반적인 내용을 설명합니다. 강의 내용이 많아 여기서 다 설명할 수 없고 아래의 링크를 통해 학습하거나 <a href="https://edu.nextstep.camp/">NEXTSTEP</a> 강의를 통해 학습할 수 있습니다. 😆<br />
- <a href="https://www.youtube.com/playlist?list=PL9mhQYIlKEhfpMVndI23RwWTL9-VL-B7U" target="_blank">JPA 프로그래밍 기본기 다지기 | T아카데미</a><br />
- <a href="https://www.slideshare.net/ssusere4d67c/jpa-56081624" target="_blank">영속성 컨텍스트로 보는 JPA</a><br />
- <a href="https://youtu.be/mezbxKGu68Y" target="_blank">ORM vs SQL Mapper vs JDBC</a><br />
- <a href="http://www.yes24.com/Product/Goods/19040233" target="_blank">자바 ORM 표준 JPA 프로그래밍</a></p>

<p><strong>JPA 설정</strong><br />
- Spring Data JPA 사용 시 아래 옵션은 동작 쿼리를 로그로 확인할 수 있게 해준다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
</code></pre></div></div>

<p>- H2 데이터베이스를 사용한다면 아래의 프로퍼티를 추가하여 MySQL Dialect을 사용할 수 있다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.datasource.url=jdbc:h2:~/test;MODE=MySQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
</code></pre></div></div>

<p><strong>엔티티 비교</strong><br />
- 엔티티의 <code class="language-plaintext highlighter-rouge">equals()</code>와 <code class="language-plaintext highlighter-rouge">hashCode()</code>를 구현할 때는 엔티티의 식별자만 있어도 충분하다.</p>

<p><strong>@ManyToOne vs @OneToOne</strong><br />
- 생성되는 DDL은 똑같을 수 있다.<br />
- 관념적으로 차이가 발생한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">();</span>
<span class="nc">Order</span> <span class="n">order1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
<span class="n">order1</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
<span class="nc">Order</span> <span class="n">order2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
<span class="n">order2</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
<span class="n">save</span><span class="o">();</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@OneToOne</span> <span class="k">case</span><span class="o">:</span>
<span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">HibernateException</span><span class="o">:</span> <span class="nc">More</span> <span class="n">than</span> <span class="n">one</span> <span class="n">row</span> <span class="n">with</span> <span class="n">the</span> <span class="n">given</span> <span class="n">identifier</span> <span class="n">was</span> <span class="nl">found:</span> <span class="mi">1</span>

<span class="nd">@ManyToOne</span> <span class="k">case</span><span class="o">:</span>
<span class="no">SUCCESS</span>
</code></pre></div></div>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>JPA 미션을 시작하기 전에 바로 코딩을 하기 보다는 부족한 JPA지식을 쌓고 미션을 시작하는게 좋다고 판단하여 예전에 샀던 <strong>자바 ORM 표준 JPA 프로그래밍</strong> 책을 다시한번 읽으며 JPA에 대해 공부를 먼저 하였다. 처음 읽었을 때는 이해 안가는 부분이 많았지만 <del>(mappedBy)</del> 두 번째 읽으니 한 번 읽은 경험이 있어서 그런지 처음보다는 빠르게 이해가 되었다.</p>

<p>우테캠 Pro 진행하는 사람들끼리 모여 JPA 스터디그룹도 만드는것 같았지만 내가 스터디를 병행하기에는 시간이 부족할거 같아 혼자 공부하는 방법을 택했다. <del>좀 아쉽다…</del></p>

<p>주말을 투자해 책을 읽으니 대략적으로 내용을 이해할 수 있었고, 미션을 시작하였다.</p>

<p>엔티티 매핑, 연관 관계 매핑의 경우 크게 복잡한 요구사항이 아니라 수월하게 진행할 수 있었고, 질문 삭제하기 리팩터링(서비스 레이어 리팩터링) 경우에는 강의 내용을 참고하여 도메인으로 로직을 분리하고 서비스에서는 도메인을 호출하는 식으로 리팩터링을 진행하며 미션을 마무리할 수 있었다.</p>

<p>JPA 미션을 하며 나의 문제점은 JPA에 사용에 대한 문제라기 보다는<del>(물론 JPA 이해도가 높다고 할 수 없으며 공부 필요!)</del> 이전 미션에서도 지적 받은 테스트 코드의 미숙함으로 <strong>설명의 가독성</strong>, <strong>테스트의 독립성을 최대로 보장하는 습관</strong>이 부족하였다.</p>

<p>이를 개선하기 위해서 테스트설명은 파라미터와 리턴값도 작성하며 상세하게 작성하고, <code class="language-plaintext highlighter-rouge">@BeforeEach</code>는 정말 필요할 때만 사용하며 리뷰어님께 피드백 받은 것처럼 <code class="language-plaintext highlighter-rouge">TextFixture</code>를 활용하는 방법도 찾아서 적용해 봐야겠다. 그리고 제일 중요한 것은 반복 숙달을 통한 연습이 필요할 것 같다. 😂</p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/jwp-qna/tree/step3" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 - 1주차 (로또 TDD)</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 - 1주차 (로또 TDD)" /><published>2023-01-03T00:00:00+09:00</published><updated>2023-01-03T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-1%EC%A3%BC%EC%B0%A8/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-미션-설명">🙇🏻‍♂️ 미션 설명</h2>
<p>로또 구입 금액을 입력하면, 구입 금액에 해당하는 로또를 발급하는 애플리케이션을 만드는 미션</p>

<h2 id="-학습-목표">🎯 학습 목표</h2>
<ul>
  <li><strong>TDD 기반으로 프로그래밍하는 경험</strong></li>
  <li>메소드 분리 + 클래스를 분리하는 리팩토링 경험</li>
  <li>점진적으로 리팩토링하는 경험</li>
  <li>객체지향 생활 체조 원칙 경험</li>
  <li>Clean Code 경험</li>
</ul>

<h2 id="-강의-내용">📖 강의 내용</h2>
<p>강의 내용은 TDD란 무엇이고, 하는 이유, TDD로 프로그래밍 하는 방법, TDD 원칙을 설명합니다.</p>

<p><strong>TDD란?</strong></p>
<ul>
  <li>TDD = TFD(Test First Development) + 리팩토링</li>
  <li>TDD란 프로그래밍 의사결정과 피드백 사이의 간극을 의식하고 이를 제어하는 기술이다.</li>
  <li>TDD의 아이러니 중 하나는 테스트 기술이 아니라는 점이다. TDD는 분석 기술이며, 설계 기술이기도 하다.</li>
</ul>

<p><strong>TDD를 하는 이유</strong></p>
<ul>
  <li>디버깅 시간을 줄여준다.</li>
  <li>동작하는 문서 역할을 한다.</li>
  <li>변화에 대한 두려움을 줄여준다.</li>
</ul>

<p><strong>TDD 사이클</strong>
<img src="/assets/images/posts/tdd_cycle.png" alt="tdd_cycle" /></p>
<ul>
  <li>실패하는 테스트를 구현한다.</li>
  <li>테스트가 성공하도록 프로덕션 코드를 구현한다.</li>
  <li>프로덕션 코드와 테스트코드를 리팩토링한다.</li>
</ul>

<p><strong>TDD 원칙</strong></p>
<ul>
  <li>실패하는 단위 테스트를 작성할 때까지 프로덕션 코드(production code)를 작성하지 않는다.</li>
  <li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>
  <li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>
</ul>

<p><strong>TDD가 막막할 때 팁</strong></p>
<ol>
  <li>우선 <strong>구현할 기능 목록을 작성</strong>한 후에 TDD로 도전.</li>
  <li>그래도 막막하다면 <strong>지금까지 익숙한 방식으로 일단 구현</strong></li>
  <li>구현하려는 프로그래밍의 <strong>도메인 지식을 쌓는다.</strong></li>
  <li><strong>구현한 모든 코드를 버린다.</strong></li>
  <li>구현할 기능 목록 작성 또는 간단한 도메인 설계</li>
  <li>기능 목록 중 가장 만만한 녀석부터 TDD로 구현 시작</li>
  <li>복잡도가 높아져 리팩토링하기 힘든 상태가 되면 다시 버린다.</li>
  <li>다시 도전</li>
</ol>

<h2 id="-미션-후기">📝 미션 후기</h2>
<p>기존에 TDD가 무엇인지는 알고 있었지만 실제로 써본 것은 처음이여서 어떻게 시작해야 할 지 막막하였다. 그래서 일단 키보드에서 손을 떼고 로또 애플리케이션을 만들기 위해서 어떤 도메인이 필요한지부터 생각하였다.</p>

<p>물론 TDD만 처음 접한 것 뿐만 아니라 도메인 설계 지식도 부족하여 이 또한 막막하였다.</p>

<p>도메인을 설계를 어떻게 해야 하나 고민하며 내가 내린 결론은, 실 생활에서 로또를 구매한다면 어떤 주체들이 필요한지를 떠올리는 것이었다. 실 생활에 대입해 보니 어느정도 도메인 윤곽이 잡혔고, 구현 기능 목록을 작성을 시작으로 TDD 사이클을 지키도록 노력하며 애플리케이션 개발을 하였다.</p>

<p>TDD를 진행하며 처음 테스트코드를 작성할 때 어떤 기능부터 작성해야 하는지 잘 몰라서 답답했는데, 포비님의 가르침 대로 일단 생성을 테스트하는 것부터 만들며 시작하였다. 그렇게 물꼬를 트면서 시작하니까 조금은 수월하게 테스트코드를 작성할 수 있었다.</p>

<p>TDD를 진행하면서 처음에는 어색했지만 조금씩 익숙해 졌고, 그 다음에는 객체지향 생활 체조 원칙을 지키며 프로그래밍 하려고 노력하며 프로그래밍을 하였고 미션을 잘 마무리할 수 있었다.</p>

<p>로또 미션을 하며 나의 문제점은 테스트코드를 작성할 때 설명의 가독성이 떨어진다는 것이었다.<em>(예: 로또 구매 가능 갯수 계산 -&gt; 5000원으로 구매 가능한 로또의 개수를 계산하면 5개 이다.)</em> 이를 개선하기 위해서 피드백 받은것 처럼 파라미터와 리턴값도 정확히 테스트코드 설명에 추가 하는식으로 작성하면 좋을 것 같다. <del>독서를 통해 글을 잘 쓰는 능력을 키우는 것도…</del></p>

<h2 id="-저장소">💾 저장소</h2>
<p><a href="https://github.com/sangjaeoh/java-lotto-pro/tree/step5" target="_blank">깃허브 저장소 링크</a></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">객체지향 생활체조 원칙</title><link href="http://localhost:4000/etc/object-calisthenics/" rel="alternate" type="text/html" title="객체지향 생활체조 원칙" /><published>2023-01-02T00:00:00+09:00</published><updated>2023-01-02T00:00:00+09:00</updated><id>http://localhost:4000/etc/object-calisthenics</id><content type="html" xml:base="http://localhost:4000/etc/object-calisthenics/"><![CDATA[<h2 id="-객체지향-생활-체조-원칙이란">🤔 객체지향 생활 체조 원칙이란?</h2>
<p>객체지향 생활 체조 원칙은 ‘소트웍스 앤솔러지’라는 책에서 제시하는 내용으로 객체지향 프로그래밍을 잘 하기 위한 9가지 원칙을 제시합니다.</p>

<h2 id="️️-객체지향-생활-체조-9가지-원칙">⛹️‍♀️ 객체지향 생활 체조 9가지 원칙</h2>
<ul>
  <li>규칙 1: 한 메서드에 오직 한 단계의 들여쓰기(indent)만 한다.</li>
  <li>규칙 2: else 예약어를 쓰지 않는다.</li>
  <li>규칙 3: 모든 원시값과 문자열을 포장한다.</li>
  <li>규칙 4: 한 줄에 점을 하나만 찍는다.</li>
  <li>규칙 5: 줄여쓰지 않는다(축약 금지).</li>
  <li>규칙 6: 모든 엔티티를 작게 유지한다.</li>
  <li>규칙 7: 3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.</li>
  <li>규칙 8: 일급 콜렉션을 쓴다.</li>
  <li>규칙 9: 게터/세터/프로퍼티를 쓰지 않는다.</li>
</ul>

<h2 id="️-왜-객체지향-생활-체조-원칙인가">❗️ 왜 객체지향 생활 체조 원칙인가?</h2>
<p>객체지향 설계와 구현은 단순 암기만 한다고 해결되는게 아닌 꾸준한 연습의 영역입니다. 많은 시니어 개발자들과 강사들이 OOP를 강조하지만, 책만 보고 암기만해서 시도하면 늘 고배를 마시게됩니다. 그러다 포기하는 상황도 잦은데 이렇게 고배를 마시는 이유는 많은 객체지향 책에서 어떻게 설계하고 구현하는지에 대해 추상적으로만 제시하기 때문입니다. 어디가 잘못되었는지도 모르는 개발자에게 이런 추상적인 제안은 더 혼동되게만 할 뿐입니다.</p>

<p>쉽지는 않겠지만 꾸준히 규칙을 상기하며 설계 및 구현을 하다보면 지금까지 이해가 안되던 추상적인 개념들이 이해되는 시점이 찾아올 것입니다.</p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="OOP" /><summary type="html"><![CDATA[🤔 객체지향 생활 체조 원칙이란? 객체지향 생활 체조 원칙은 ‘소트웍스 앤솔러지’라는 책에서 제시하는 내용으로 객체지향 프로그래밍을 잘 하기 위한 9가지 원칙을 제시합니다.]]></summary></entry><entry><title type="html">우아한테크캠프 Pro 5기 소개 및 커리큘럼</title><link href="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-%EC%86%8C%EA%B0%9C/" rel="alternate" type="text/html" title="우아한테크캠프 Pro 5기 소개 및 커리큘럼" /><published>2023-01-02T00:00:00+09:00</published><updated>2023-01-02T00:00:00+09:00</updated><id>http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-%EC%86%8C%EA%B0%9C</id><content type="html" xml:base="http://localhost:4000/etc/education/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BA%A0%ED%94%84pro5%EA%B8%B0-%EC%86%8C%EA%B0%9C/"><![CDATA[<p><em>2022년 10월 24일 ~ 2022년 12월 23일</em><br />
우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.</p>

<h2 id="️-우아한테크캠프-pro-소개">🙇🏻‍♂️ 우아한테크캠프 Pro 소개</h2>
<p>NextStep 교육 과정으로 9주 동안 8개 미션을 진행을 합니다. 각 미션별 코드 리뷰어가 배정 되며 미션을 진행하고, 진행한 미션에 대해 코드 리뷰를 받는식으로 강의를 진행 합니다.</p>

<h2 id="-우아한테크캠프-pro-과정의-학습-목표">🎯 우아한테크캠프 Pro 과정의 학습 목표</h2>
<ul>
  <li>클린코드를 통해 유지보수하기 좋은 코드를 구현하는 경험</li>
  <li>JPA 기반으로 웹 애플리케이션을 개발하는 경험</li>
  <li>단위, 인수 테스트를 기반으로 웹 애플리케이션을 개발하는 경험</li>
  <li>레거시 코드를 안정적으로 리팩터링하는 경험</li>
  <li>시스템 아키텍처를 설계하고 운영하는 경험</li>
  <li>대용량 데이터에 대해 최적화할 대상을 살펴보고, 서버를 튜닝하는 경험</li>
</ul>

<h2 id="-커리큘럼">🧾 커리큘럼</h2>
<p><strong>1주차: 로또 - TDD</strong></p>
<ul>
  <li>Github 기반으로 온라인 코드 리뷰하는 경험</li>
  <li>TDD 기반으로 프로그래밍하는 경험</li>
  <li>메소드 분리 + 클래스를 분리하는 리팩토링 경험</li>
  <li>점진적으로 리팩토링하는 경험</li>
</ul>

<p><strong>2주차: Q&amp;A - JPA</strong></p>
<ul>
  <li>JPA 학습 테스트를 통한 JPA 학습</li>
  <li>Q&amp;A 서비스를 JPA로 매핑</li>
</ul>

<p><strong>3주차: 인수 테트 주도 개발</strong></p>
<ul>
  <li>ATDD Cycle</li>
  <li>인수 테스트</li>
</ul>

<p><strong>4주차: 그럴듯한 서비스 만들기</strong></p>
<ul>
  <li>서비스 구성 및 배포</li>
</ul>

<p><strong>5주차: 인수 테스트 기반 TDD</strong></p>
<ul>
  <li>TDD, 단위 테스트와 통합 테스트</li>
  <li>로그인 상태 인수 테스트</li>
</ul>

<p><strong>6주차: 서비스 진단하기</strong></p>
<ul>
  <li>부하 테스트 및 성능 모니터링</li>
</ul>

<p><strong>7주차: 레거시 코드 리팩터링</strong></p>
<ul>
  <li>레거시 코드 리팩터링 with 테스트</li>
  <li>멀티 모듈, DDD</li>
</ul>

<p><strong>8주차: 안정적인 서비스 만들기</strong></p>
<ul>
  <li>서비스 진단 및 화면 응답 개선하기</li>
  <li>SQL 최적화</li>
</ul>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="education" /><category term="education" /><category term="우아한테크캠프 pro 5기" /><summary type="html"><![CDATA[2022년 10월 24일 ~ 2022년 12월 23일 우아한테크캠프 Pro 5기를 경험한 내용 기록입니다.]]></summary></entry><entry><title type="html">마크다운 작성방법</title><link href="http://localhost:4000/etc/markdown-guide/" rel="alternate" type="text/html" title="마크다운 작성방법" /><published>2022-09-26T00:00:00+09:00</published><updated>2022-09-26T00:00:00+09:00</updated><id>http://localhost:4000/etc/markdown-guide</id><content type="html" xml:base="http://localhost:4000/etc/markdown-guide/"><![CDATA[<h2 id="마크다운이란">마크다운이란?</h2>
<p>마크다운(Markdown)은 일반 텍스트 기반의 경량 마크업 언어다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다. HTML과 리치 텍스트(RTF) 등 서식 문서로 쉽게 변환되기 때문에 응용 소프트웨어와 함께 배포되는 README 파일이나 온라인 게시물 등에 많이 사용된다.<br />
- 위키백과</p>

<hr />

<h2 id="마크다운-문법">마크다운 문법</h2>
<p><a href="https://www.markdownguide.org/basic-syntax/">마크다운 기본 가이드</a>,
<a href="https://www.markdownguide.org/extended-syntax/">마크다운 확장 가이드</a>
을 참고하였습니다.</p>

<h3 id="headings-제목">Headings 제목</h3>
<p>제목을 만들려면 단어 앞에 기호(#)를 추가합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Heading h1
## Heading h2
### Heading h3
#### Heading h4
##### Heading h5
###### Heading h6
</code></pre></div></div>
<h1>Heading h1</h1>
<h2>Heading h2</h2>
<h3>Heading h3</h3>
<h4>Heading h4</h4>
<h5>Heading h5</h5>
<h6>Heading h6</h6>

<p><br /></p>
<h4 id="대체-구문">대체 구문</h4>
<p>텍스트 아래 줄에 제목 수준 1의 경우 == 추가, 제목 수준 2의 경우 – 문자를 추가합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Heading h1
===============
Heading h2
---------------
</code></pre></div></div>
<p><br /></p>
<hr />

<h3 id="line-breaks-줄바꿈">Line Breaks 줄바꿈</h3>
<p>줄바꿈을 하려면 &lt;br/&gt;을 사용하거나, 두개 이상의 공백(spaces)를 입력하세요.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>첫번째 줄  
두분째 줄&lt;br/&gt;
세번째 줄
</code></pre></div></div>
<p>첫번째 줄<br />
두분째 줄<br />
세번째 줄
<br /></p>
<hr />

<h3 id="emphasis-강조">Emphasis 강조</h3>
<p>텍스트를 굵게 또는 기울임꼴로 지정하여 강조를 표현할 수 있습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>굵은 글씨
**bold text**
__bold text__

기울인 글씨
*italic text*
_italic text_

굵게 + 기울인 글씨
***bold + italic text***
___bold + italic text___
</code></pre></div></div>
<p>굵은 글씨<br />
<strong>bold text</strong><br />
<strong>bold text</strong><br /></p>

<p>기울인 글씨<br />
<em>italic text</em><br />
<em>italic text</em><br /></p>

<p>굵게 + 기울인 글씨<br />
<strong><em>bold + italic text</em></strong><br />
<strong><em>bold + italic text</em></strong><br /></p>]]></content><author><name>Sangjae Oh</name></author><category term="etc" /><category term="markdown" /><summary type="html"><![CDATA[마크다운이란? 마크다운(Markdown)은 일반 텍스트 기반의 경량 마크업 언어다. 일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다. HTML과 리치 텍스트(RTF) 등 서식 문서로 쉽게 변환되기 때문에 응용 소프트웨어와 함께 배포되는 README 파일이나 온라인 게시물 등에 많이 사용된다. - 위키백과]]></summary></entry></feed>